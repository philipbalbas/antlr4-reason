// Generated from Graql.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var GraqlListener = require('./GraqlListener').GraqlListener;
var GraqlVisitor = require('./GraqlVisitor').GraqlVisitor;

var grammarFileName = "Graql.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003j\u02bf\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0006\u0003\u009f\n\u0003\r\u0003\u000e",
    "\u0003\u00a0\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0005\u0006\u0005\u00a9\n\u0005\r\u0005\u000e\u0005\u00aa\u0003",
    "\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u00b8",
    "\n\u0006\u0003\u0007\u0003\u0007\u0006\u0007\u00bc\n\u0007\r\u0007\u000e",
    "\u0007\u00bd\u0003\b\u0003\b\u0006\b\u00c2\n\b\r\b\u000e\b\u00c3\u0003",
    "\t\u0003\t\u0006\t\u00c8\n\t\r\t\u000e\t\u00c9\u0003\t\u0003\t\u0006",
    "\t\u00ce\n\t\r\t\u000e\t\u00cf\u0003\t\u0003\t\u0006\t\u00d4\n\t\r\t",
    "\u000e\t\u00d5\u0005\t\u00d8\n\t\u0003\n\u0003\n\u0006\n\u00dc\n\n\r",
    "\n\u000e\n\u00dd\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b",
    "\u0006\u000b\u00e6\n\u000b\r\u000b\u000e\u000b\u00e7\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\r\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010",
    "\u00fe\n\u0010\f\u0010\u000e\u0010\u0101\u000b\u0010\u0005\u0010\u0103",
    "\n\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0005\u0011\u0108\n\u0011",
    "\u0003\u0011\u0005\u0011\u010b\n\u0011\u0003\u0011\u0005\u0011\u010e",
    "\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0113\n\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u0121\n\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0006",
    "\u0018\u012c\n\u0018\r\u0018\u000e\u0018\u012d\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0005\u0019\u0134\n\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0006",
    "\u001b\u0143\n\u001b\r\u001b\u000e\u001b\u0144\u0003\u001b\u0003\u001b",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001d\u0003\u001d\u0005\u001d\u0151\n\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u0157\n\u001e\f\u001e\u000e",
    "\u001e\u015a\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f",
    "\u016b\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0006\u001f\u0174\n\u001f\r\u001f\u000e",
    "\u001f\u0175\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0006\u001f\u017d\n\u001f\r\u001f\u000e\u001f\u017e\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0185\n\u001f\u0003 \u0003",
    " \u0003 \u0005 \u018a\n \u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u0191",
    "\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u019a\n",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005",
    "!\u01a5\n!\u0003\"\u0005\"\u01a8\n\"\u0003\"\u0003\"\u0003\"\u0003\"",
    "\u0003\"\u0005\"\u01af\n\"\u0003\"\u0003\"\u0003\"\u0005\"\u01b4\n\"",
    "\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u01bb\n\"\u0003\"\u0003",
    "\"\u0003\"\u0005\"\u01c0\n\"\u0003#\u0005#\u01c3\n#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u01ca\n#\u0003#\u0003#\u0003#\u0005#\u01cf\n",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u01d6\n#\u0003#\u0003#\u0003",
    "#\u0005#\u01db\n#\u0003$\u0003$\u0003$\u0003$\u0007$\u01e1\n$\f$\u000e",
    "$\u01e4\u000b$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003%\u0005",
    "%\u01ed\n%\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003",
    "(\u0007(\u01f7\n(\f(\u000e(\u01fa\u000b(\u0003)\u0003)\u0003)\u0003",
    ")\u0005)\u0200\n)\u0003)\u0005)\u0203\n)\u0003*\u0003*\u0005*\u0207",
    "\n*\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005",
    ",\u0212\n,\u0003-\u0003-\u0003.\u0003.\u0005.\u0218\n.\u0003/\u0003",
    "/\u00030\u00030\u00030\u00030\u00030\u00050\u0221\n0\u00031\u00031\u0003",
    "2\u00032\u00052\u0227\n2\u00032\u00032\u00033\u00033\u00033\u00033\u0007",
    "3\u022f\n3\f3\u000e3\u0232\u000b3\u00033\u00033\u00034\u00034\u0003",
    "4\u00034\u00074\u023a\n4\f4\u000e4\u023d\u000b4\u00034\u00034\u0003",
    "5\u00035\u00035\u00035\u00075\u0245\n5\f5\u000e5\u0248\u000b5\u0003",
    "5\u00035\u00036\u00036\u00036\u00036\u00076\u0250\n6\f6\u000e6\u0253",
    "\u000b6\u00036\u00036\u00037\u00037\u00038\u00038\u00058\u025b\n8\u0003",
    "9\u00039\u00039\u00059\u0260\n9\u0003:\u0003:\u0005:\u0264\n:\u0003",
    ";\u0003;\u0005;\u0268\n;\u0003<\u0003<\u0003<\u0003<\u0005<\u026e\n",
    "<\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003",
    "?\u0005?\u027a\n?\u0003@\u0003@\u0003A\u0003A\u0005A\u0280\nA\u0003",
    "B\u0003B\u0003B\u0003B\u0007B\u0286\nB\fB\u000eB\u0289\u000bB\u0003",
    "B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0005C\u0299\nC\u0003D\u0003D\u0005D\u029d\n",
    "D\u0003E\u0003E\u0003E\u0005E\u02a2\nE\u0003F\u0003F\u0005F\u02a6\n",
    "F\u0003G\u0003G\u0003G\u0003G\u0007G\u02ac\nG\fG\u000eG\u02af\u000b",
    "G\u0003G\u0003G\u0003H\u0003H\u0003I\u0003I\u0003J\u0003J\u0003K\u0003",
    "K\u0003L\u0003L\u0003M\u0003M\u0003M\u0002\u0002N\u0002\u0004\u0006",
    "\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*",
    ",.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086",
    "\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u0002\f\u0003",
    "\u00025;\u0003\u0002PU\u0004\u0002^^cc\u0003\u00026;\u0003\u0002?A\u0003",
    "\u0002\u0015\u001a\u0003\u0002fh\u0003\u0002VZ\u0004\u0002[[^b\u0005",
    "\u00025<>EGK\u0002\u02d5\u0002\u009a\u0003\u0002\u0002\u0002\u0004\u009e",
    "\u0003\u0002\u0002\u0002\u0006\u00a4\u0003\u0002\u0002\u0002\b\u00a8",
    "\u0003\u0002\u0002\u0002\n\u00b7\u0003\u0002\u0002\u0002\f\u00b9\u0003",
    "\u0002\u0002\u0002\u000e\u00bf\u0003\u0002\u0002\u0002\u0010\u00d7\u0003",
    "\u0002\u0002\u0002\u0012\u00d9\u0003\u0002\u0002\u0002\u0014\u00e3\u0003",
    "\u0002\u0002\u0002\u0016\u00ed\u0003\u0002\u0002\u0002\u0018\u00f0\u0003",
    "\u0002\u0002\u0002\u001a\u00f3\u0003\u0002\u0002\u0002\u001c\u00f6\u0003",
    "\u0002\u0002\u0002\u001e\u0102\u0003\u0002\u0002\u0002 \u0107\u0003",
    "\u0002\u0002\u0002\"\u010f\u0003\u0002\u0002\u0002$\u0116\u0003\u0002",
    "\u0002\u0002&\u011a\u0003\u0002\u0002\u0002(\u011e\u0003\u0002\u0002",
    "\u0002*\u0124\u0003\u0002\u0002\u0002,\u0126\u0003\u0002\u0002\u0002",
    ".\u012b\u0003\u0002\u0002\u00020\u0133\u0003\u0002\u0002\u00022\u0135",
    "\u0003\u0002\u0002\u00024\u013a\u0003\u0002\u0002\u00026\u0148\u0003",
    "\u0002\u0002\u00028\u0150\u0003\u0002\u0002\u0002:\u0152\u0003\u0002",
    "\u0002\u0002<\u0184\u0003\u0002\u0002\u0002>\u0189\u0003\u0002\u0002",
    "\u0002@\u01a4\u0003\u0002\u0002\u0002B\u01bf\u0003\u0002\u0002\u0002",
    "D\u01da\u0003\u0002\u0002\u0002F\u01dc\u0003\u0002\u0002\u0002H\u01ec",
    "\u0003\u0002\u0002\u0002J\u01ee\u0003\u0002\u0002\u0002L\u01f0\u0003",
    "\u0002\u0002\u0002N\u01f3\u0003\u0002\u0002\u0002P\u01fb\u0003\u0002",
    "\u0002\u0002R\u0206\u0003\u0002\u0002\u0002T\u0208\u0003\u0002\u0002",
    "\u0002V\u0211\u0003\u0002\u0002\u0002X\u0213\u0003\u0002\u0002\u0002",
    "Z\u0217\u0003\u0002\u0002\u0002\\\u0219\u0003\u0002\u0002\u0002^\u0220",
    "\u0003\u0002\u0002\u0002`\u0222\u0003\u0002\u0002\u0002b\u0224\u0003",
    "\u0002\u0002\u0002d\u022a\u0003\u0002\u0002\u0002f\u0235\u0003\u0002",
    "\u0002\u0002h\u0240\u0003\u0002\u0002\u0002j\u024b\u0003\u0002\u0002",
    "\u0002l\u0256\u0003\u0002\u0002\u0002n\u025a\u0003\u0002\u0002\u0002",
    "p\u025f\u0003\u0002\u0002\u0002r\u0263\u0003\u0002\u0002\u0002t\u0267",
    "\u0003\u0002\u0002\u0002v\u026d\u0003\u0002\u0002\u0002x\u026f\u0003",
    "\u0002\u0002\u0002z\u0272\u0003\u0002\u0002\u0002|\u0279\u0003\u0002",
    "\u0002\u0002~\u027b\u0003\u0002\u0002\u0002\u0080\u027f\u0003\u0002",
    "\u0002\u0002\u0082\u0281\u0003\u0002\u0002\u0002\u0084\u0298\u0003\u0002",
    "\u0002\u0002\u0086\u029c\u0003\u0002\u0002\u0002\u0088\u02a1\u0003\u0002",
    "\u0002\u0002\u008a\u02a5\u0003\u0002\u0002\u0002\u008c\u02a7\u0003\u0002",
    "\u0002\u0002\u008e\u02b2\u0003\u0002\u0002\u0002\u0090\u02b4\u0003\u0002",
    "\u0002\u0002\u0092\u02b6\u0003\u0002\u0002\u0002\u0094\u02b8\u0003\u0002",
    "\u0002\u0002\u0096\u02ba\u0003\u0002\u0002\u0002\u0098\u02bc\u0003\u0002",
    "\u0002\u0002\u009a\u009b\u0005\n\u0006\u0002\u009b\u009c\u0007\u0002",
    "\u0002\u0003\u009c\u0003\u0003\u0002\u0002\u0002\u009d\u009f\u0005\n",
    "\u0006\u0002\u009e\u009d\u0003\u0002\u0002\u0002\u009f\u00a0\u0003\u0002",
    "\u0002\u0002\u00a0\u009e\u0003\u0002\u0002\u0002\u00a0\u00a1\u0003\u0002",
    "\u0002\u0002\u00a1\u00a2\u0003\u0002\u0002\u0002\u00a2\u00a3\u0007\u0002",
    "\u0002\u0003\u00a3\u0005\u0003\u0002\u0002\u0002\u00a4\u00a5\u00050",
    "\u0019\u0002\u00a5\u00a6\u0007\u0002\u0002\u0003\u00a6\u0007\u0003\u0002",
    "\u0002\u0002\u00a7\u00a9\u00050\u0019\u0002\u00a8\u00a7\u0003\u0002",
    "\u0002\u0002\u00a9\u00aa\u0003\u0002\u0002\u0002\u00aa\u00a8\u0003\u0002",
    "\u0002\u0002\u00aa\u00ab\u0003\u0002\u0002\u0002\u00ab\u00ac\u0003\u0002",
    "\u0002\u0002\u00ac\u00ad\u0007\u0002\u0002\u0003\u00ad\t\u0003\u0002",
    "\u0002\u0002\u00ae\u00b8\u0005\f\u0007\u0002\u00af\u00b8\u0005\u000e",
    "\b\u0002\u00b0\u00b8\u0005\u0010\t\u0002\u00b1\u00b8\u0005\u0012\n\u0002",
    "\u00b2\u00b8\u0005\u0014\u000b\u0002\u00b3\u00b8\u0005\u0018\r\u0002",
    "\u00b4\u00b8\u0005\u001a\u000e\u0002\u00b5\u00b8\u0005\u001c\u000f\u0002",
    "\u00b6\u00b8\u0005\u0016\f\u0002\u00b7\u00ae\u0003\u0002\u0002\u0002",
    "\u00b7\u00af\u0003\u0002\u0002\u0002\u00b7\u00b0\u0003\u0002\u0002\u0002",
    "\u00b7\u00b1\u0003\u0002\u0002\u0002\u00b7\u00b2\u0003\u0002\u0002\u0002",
    "\u00b7\u00b3\u0003\u0002\u0002\u0002\u00b7\u00b4\u0003\u0002\u0002\u0002",
    "\u00b7\u00b5\u0003\u0002\u0002\u0002\u00b7\u00b6\u0003\u0002\u0002\u0002",
    "\u00b8\u000b\u0003\u0002\u0002\u0002\u00b9\u00bb\u0007\u000f\u0002\u0002",
    "\u00ba\u00bc\u0005:\u001e\u0002\u00bb\u00ba\u0003\u0002\u0002\u0002",
    "\u00bc\u00bd\u0003\u0002\u0002\u0002\u00bd\u00bb\u0003\u0002\u0002\u0002",
    "\u00bd\u00be\u0003\u0002\u0002\u0002\u00be\r\u0003\u0002\u0002\u0002",
    "\u00bf\u00c1\u0007\u0010\u0002\u0002\u00c0\u00c2\u0005:\u001e\u0002",
    "\u00c1\u00c0\u0003\u0002\u0002\u0002\u00c2\u00c3\u0003\u0002\u0002\u0002",
    "\u00c3\u00c1\u0003\u0002\u0002\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002",
    "\u00c4\u000f\u0003\u0002\u0002\u0002\u00c5\u00c7\u0007\r\u0002\u0002",
    "\u00c6\u00c8\u00050\u0019\u0002\u00c7\u00c6\u0003\u0002\u0002\u0002",
    "\u00c8\u00c9\u0003\u0002\u0002\u0002\u00c9\u00c7\u0003\u0002\u0002\u0002",
    "\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca\u00cb\u0003\u0002\u0002\u0002",
    "\u00cb\u00cd\u0007\u0011\u0002\u0002\u00cc\u00ce\u0005> \u0002\u00cd",
    "\u00cc\u0003\u0002\u0002\u0002\u00ce\u00cf\u0003\u0002\u0002\u0002\u00cf",
    "\u00cd\u0003\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002\u0002\u0002\u00d0",
    "\u00d8\u0003\u0002\u0002\u0002\u00d1\u00d3\u0007\u0011\u0002\u0002\u00d2",
    "\u00d4\u0005> \u0002\u00d3\u00d2\u0003\u0002\u0002\u0002\u00d4\u00d5",
    "\u0003\u0002\u0002\u0002\u00d5\u00d3\u0003\u0002\u0002\u0002\u00d5\u00d6",
    "\u0003\u0002\u0002\u0002\u00d6\u00d8\u0003\u0002\u0002\u0002\u00d7\u00c5",
    "\u0003\u0002\u0002\u0002\u00d7\u00d1\u0003\u0002\u0002\u0002\u00d8\u0011",
    "\u0003\u0002\u0002\u0002\u00d9\u00db\u0007\r\u0002\u0002\u00da\u00dc",
    "\u00050\u0019\u0002\u00db\u00da\u0003\u0002\u0002\u0002\u00dc\u00dd",
    "\u0003\u0002\u0002\u0002\u00dd\u00db\u0003\u0002\u0002\u0002\u00dd\u00de",
    "\u0003\u0002\u0002\u0002\u00de\u00df\u0003\u0002\u0002\u0002\u00df\u00e0",
    "\u0007\u0012\u0002\u0002\u00e0\u00e1\u0005\u001e\u0010\u0002\u00e1\u00e2",
    "\u0005 \u0011\u0002\u00e2\u0013\u0003\u0002\u0002\u0002\u00e3\u00e5",
    "\u0007\r\u0002\u0002\u00e4\u00e6\u00050\u0019\u0002\u00e5\u00e4\u0003",
    "\u0002\u0002\u0002\u00e6\u00e7\u0003\u0002\u0002\u0002\u00e7\u00e5\u0003",
    "\u0002\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8\u00e9\u0003",
    "\u0002\u0002\u0002\u00e9\u00ea\u0007\u000e\u0002\u0002\u00ea\u00eb\u0005",
    "\u001e\u0010\u0002\u00eb\u00ec\u0005 \u0011\u0002\u00ec\u0015\u0003",
    "\u0002\u0002\u0002\u00ed\u00ee\u0007\u0014\u0002\u0002\u00ee\u00ef\u0005",
    "^0\u0002\u00ef\u0017\u0003\u0002\u0002\u0002\u00f0\u00f1\u0005\u0014",
    "\u000b\u0002\u00f1\u00f2\u0005(\u0015\u0002\u00f2\u0019\u0003\u0002",
    "\u0002\u0002\u00f3\u00f4\u0005\u0014\u000b\u0002\u00f4\u00f5\u0005,",
    "\u0017\u0002\u00f5\u001b\u0003\u0002\u0002\u0002\u00f6\u00f7\u0005\u0014",
    "\u000b\u0002\u00f7\u00f8\u0005,\u0017\u0002\u00f8\u00f9\u0005(\u0015",
    "\u0002\u00f9\u001d\u0003\u0002\u0002\u0002\u00fa\u00ff\u0007c\u0002",
    "\u0002\u00fb\u00fc\u0007\u0003\u0002\u0002\u00fc\u00fe\u0007c\u0002",
    "\u0002\u00fd\u00fb\u0003\u0002\u0002\u0002\u00fe\u0101\u0003\u0002\u0002",
    "\u0002\u00ff\u00fd\u0003\u0002\u0002\u0002\u00ff\u0100\u0003\u0002\u0002",
    "\u0002\u0100\u0103\u0003\u0002\u0002\u0002\u0101\u00ff\u0003\u0002\u0002",
    "\u0002\u0102\u00fa\u0003\u0002\u0002\u0002\u0102\u0103\u0003\u0002\u0002",
    "\u0002\u0103\u0104\u0003\u0002\u0002\u0002\u0104\u0105\u0007\u0004\u0002",
    "\u0002\u0105\u001f\u0003\u0002\u0002\u0002\u0106\u0108\u0005\"\u0012",
    "\u0002\u0107\u0106\u0003\u0002\u0002\u0002\u0107\u0108\u0003\u0002\u0002",
    "\u0002\u0108\u010a\u0003\u0002\u0002\u0002\u0109\u010b\u0005$\u0013",
    "\u0002\u010a\u0109\u0003\u0002\u0002\u0002\u010a\u010b\u0003\u0002\u0002",
    "\u0002\u010b\u010d\u0003\u0002\u0002\u0002\u010c\u010e\u0005&\u0014",
    "\u0002\u010d\u010c\u0003\u0002\u0002\u0002\u010d\u010e\u0003\u0002\u0002",
    "\u0002\u010e!\u0003\u0002\u0002\u0002\u010f\u0110\u0007\u001d\u0002",
    "\u0002\u0110\u0112\u0007c\u0002\u0002\u0111\u0113\u0007\u001e\u0002",
    "\u0002\u0112\u0111\u0003\u0002\u0002\u0002\u0112\u0113\u0003\u0002\u0002",
    "\u0002\u0113\u0114\u0003\u0002\u0002\u0002\u0114\u0115\u0007\u0004\u0002",
    "\u0002\u0115#\u0003\u0002\u0002\u0002\u0116\u0117\u0007\u001b\u0002",
    "\u0002\u0117\u0118\u0007_\u0002\u0002\u0118\u0119\u0007\u0004\u0002",
    "\u0002\u0119%\u0003\u0002\u0002\u0002\u011a\u011b\u0007\u001c\u0002",
    "\u0002\u011b\u011c\u0007_\u0002\u0002\u011c\u011d\u0007\u0004\u0002",
    "\u0002\u011d\'\u0003\u0002\u0002\u0002\u011e\u0120\u0005*\u0016\u0002",
    "\u011f\u0121\u0007c\u0002\u0002\u0120\u011f\u0003\u0002\u0002\u0002",
    "\u0120\u0121\u0003\u0002\u0002\u0002\u0121\u0122\u0003\u0002\u0002\u0002",
    "\u0122\u0123\u0007\u0004\u0002\u0002\u0123)\u0003\u0002\u0002\u0002",
    "\u0124\u0125\t\u0002\u0002\u0002\u0125+\u0003\u0002\u0002\u0002\u0126",
    "\u0127\u00074\u0002\u0002\u0127\u0128\u0007c\u0002\u0002\u0128\u0129",
    "\u0007\u0004\u0002\u0002\u0129-\u0003\u0002\u0002\u0002\u012a\u012c",
    "\u00050\u0019\u0002\u012b\u012a\u0003\u0002\u0002\u0002\u012c\u012d",
    "\u0003\u0002\u0002\u0002\u012d\u012b\u0003\u0002\u0002\u0002\u012d\u012e",
    "\u0003\u0002\u0002\u0002\u012e/\u0003\u0002\u0002\u0002\u012f\u0134",
    "\u00058\u001d\u0002\u0130\u0134\u00052\u001a\u0002\u0131\u0134\u0005",
    "4\u001b\u0002\u0132\u0134\u00056\u001c\u0002\u0133\u012f\u0003\u0002",
    "\u0002\u0002\u0133\u0130\u0003\u0002\u0002\u0002\u0133\u0131\u0003\u0002",
    "\u0002\u0002\u0133\u0132\u0003\u0002\u0002\u0002\u01341\u0003\u0002",
    "\u0002\u0002\u0135\u0136\u0007\u0005\u0002\u0002\u0136\u0137\u0005.",
    "\u0018\u0002\u0137\u0138\u0007\u0006\u0002\u0002\u0138\u0139\u0007\u0004",
    "\u0002\u0002\u01393\u0003\u0002\u0002\u0002\u013a\u013b\u0007\u0005",
    "\u0002\u0002\u013b\u013c\u0005.\u0018\u0002\u013c\u0142\u0007\u0006",
    "\u0002\u0002\u013d\u013e\u0007L\u0002\u0002\u013e\u013f\u0007\u0005",
    "\u0002\u0002\u013f\u0140\u0005.\u0018\u0002\u0140\u0141\u0007\u0006",
    "\u0002\u0002\u0141\u0143\u0003\u0002\u0002\u0002\u0142\u013d\u0003\u0002",
    "\u0002\u0002\u0143\u0144\u0003\u0002\u0002\u0002\u0144\u0142\u0003\u0002",
    "\u0002\u0002\u0144\u0145\u0003\u0002\u0002\u0002\u0145\u0146\u0003\u0002",
    "\u0002\u0002\u0146\u0147\u0007\u0004\u0002\u0002\u01475\u0003\u0002",
    "\u0002\u0002\u0148\u0149\u0007M\u0002\u0002\u0149\u014a\u0007\u0005",
    "\u0002\u0002\u014a\u014b\u0005.\u0018\u0002\u014b\u014c\u0007\u0006",
    "\u0002\u0002\u014c\u014d\u0007\u0004\u0002\u0002\u014d7\u0003\u0002",
    "\u0002\u0002\u014e\u0151\u0005:\u001e\u0002\u014f\u0151\u0005> \u0002",
    "\u0150\u014e\u0003\u0002\u0002\u0002\u0150\u014f\u0003\u0002\u0002\u0002",
    "\u01519\u0003\u0002\u0002\u0002\u0152\u0153\u0005\u0086D\u0002\u0153",
    "\u0158\u0005<\u001f\u0002\u0154\u0155\u0007\u0003\u0002\u0002\u0155",
    "\u0157\u0005<\u001f\u0002\u0156\u0154\u0003\u0002\u0002\u0002\u0157",
    "\u015a\u0003\u0002\u0002\u0002\u0158\u0156\u0003\u0002\u0002\u0002\u0158",
    "\u0159\u0003\u0002\u0002\u0002\u0159\u015b\u0003\u0002\u0002\u0002\u015a",
    "\u0158\u0003\u0002\u0002\u0002\u015b\u015c\u0007\u0004\u0002\u0002\u015c",
    ";\u0003\u0002\u0002\u0002\u015d\u0185\u0007!\u0002\u0002\u015e\u015f",
    "\u0007\'\u0002\u0002\u015f\u0185\u0005\u0086D\u0002\u0160\u0161\u0007",
    ",\u0002\u0002\u0161\u0185\u0005\u0086D\u0002\u0162\u0163\u0007-\u0002",
    "\u0002\u0163\u0185\u0005\u0086D\u0002\u0164\u0165\u0007.\u0002\u0002",
    "\u0165\u0185\u0005\u0086D\u0002\u0166\u0167\u0007/\u0002\u0002\u0167",
    "\u016a\u0005\u0086D\u0002\u0168\u0169\u0007#\u0002\u0002\u0169\u016b",
    "\u0005\u0086D\u0002\u016a\u0168\u0003\u0002\u0002\u0002\u016a\u016b",
    "\u0003\u0002\u0002\u0002\u016b\u0185\u0003\u0002\u0002\u0002\u016c\u016d",
    "\u00070\u0002\u0002\u016d\u0185\u0005\u0092J\u0002\u016e\u016f\u0007",
    "1\u0002\u0002\u016f\u0185\u0005\u0096L\u0002\u0170\u0171\u00072\u0002",
    "\u0002\u0171\u0173\u0007\u0005\u0002\u0002\u0172\u0174\u00050\u0019",
    "\u0002\u0173\u0172\u0003\u0002\u0002\u0002\u0174\u0175\u0003\u0002\u0002",
    "\u0002\u0175\u0173\u0003\u0002\u0002\u0002\u0175\u0176\u0003\u0002\u0002",
    "\u0002\u0176\u0177\u0003\u0002\u0002\u0002\u0177\u0178\u0007\u0006\u0002",
    "\u0002\u0178\u0185\u0003\u0002\u0002\u0002\u0179\u017a\u00073\u0002",
    "\u0002\u017a\u017c\u0007\u0005\u0002\u0002\u017b\u017d\u0005> \u0002",
    "\u017c\u017b\u0003\u0002\u0002\u0002\u017d\u017e\u0003\u0002\u0002\u0002",
    "\u017e\u017c\u0003\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002\u0002",
    "\u017f\u0180\u0003\u0002\u0002\u0002\u0180\u0181\u0007\u0006\u0002\u0002",
    "\u0181\u0185\u0003\u0002\u0002\u0002\u0182\u0183\u0007%\u0002\u0002",
    "\u0183\u0185\u0005\u0088E\u0002\u0184\u015d\u0003\u0002\u0002\u0002",
    "\u0184\u015e\u0003\u0002\u0002\u0002\u0184\u0160\u0003\u0002\u0002\u0002",
    "\u0184\u0162\u0003\u0002\u0002\u0002\u0184\u0164\u0003\u0002\u0002\u0002",
    "\u0184\u0166\u0003\u0002\u0002\u0002\u0184\u016c\u0003\u0002\u0002\u0002",
    "\u0184\u016e\u0003\u0002\u0002\u0002\u0184\u0170\u0003\u0002\u0002\u0002",
    "\u0184\u0179\u0003\u0002\u0002\u0002\u0184\u0182\u0003\u0002\u0002\u0002",
    "\u0185=\u0003\u0002\u0002\u0002\u0186\u018a\u0005@!\u0002\u0187\u018a",
    "\u0005B\"\u0002\u0188\u018a\u0005D#\u0002\u0189\u0186\u0003\u0002\u0002",
    "\u0002\u0189\u0187\u0003\u0002\u0002\u0002\u0189\u0188\u0003\u0002\u0002",
    "\u0002\u018a?\u0003\u0002\u0002\u0002\u018b\u018c\u0007c\u0002\u0002",
    "\u018c\u018d\u0007&\u0002\u0002\u018d\u0190\u0005\u0086D\u0002\u018e",
    "\u018f\u0007\u0003\u0002\u0002\u018f\u0191\u0005N(\u0002\u0190\u018e",
    "\u0003\u0002\u0002\u0002\u0190\u0191\u0003\u0002\u0002\u0002\u0191\u0192",
    "\u0003\u0002\u0002\u0002\u0192\u0193\u0007\u0004\u0002\u0002\u0193\u01a5",
    "\u0003\u0002\u0002\u0002\u0194\u0195\u0007c\u0002\u0002\u0195\u0196",
    "\u0007$\u0002\u0002\u0196\u0199\u0007f\u0002\u0002\u0197\u0198\u0007",
    "\u0003\u0002\u0002\u0198\u019a\u0005N(\u0002\u0199\u0197\u0003\u0002",
    "\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002\u019a\u019b\u0003\u0002",
    "\u0002\u0002\u019b\u01a5\u0007\u0004\u0002\u0002\u019c\u019d\u0007c",
    "\u0002\u0002\u019d\u019e\u0007O\u0002\u0002\u019e\u019f\u0007c\u0002",
    "\u0002\u019f\u01a5\u0007\u0004\u0002\u0002\u01a0\u01a1\u0007c\u0002",
    "\u0002\u01a1\u01a2\u0005N(\u0002\u01a2\u01a3\u0007\u0004\u0002\u0002",
    "\u01a3\u01a5\u0003\u0002\u0002\u0002\u01a4\u018b\u0003\u0002\u0002\u0002",
    "\u01a4\u0194\u0003\u0002\u0002\u0002\u01a4\u019c\u0003\u0002\u0002\u0002",
    "\u01a4\u01a0\u0003\u0002\u0002\u0002\u01a5A\u0003\u0002\u0002\u0002",
    "\u01a6\u01a8\u0007c\u0002\u0002\u01a7\u01a6\u0003\u0002\u0002\u0002",
    "\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002",
    "\u01a9\u01aa\u0005F$\u0002\u01aa\u01ab\u0007&\u0002\u0002\u01ab\u01ae",
    "\u0005\u0086D\u0002\u01ac\u01ad\u0007\u0003\u0002\u0002\u01ad\u01af",
    "\u0005N(\u0002\u01ae\u01ac\u0003\u0002\u0002\u0002\u01ae\u01af\u0003",
    "\u0002\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0\u01b1\u0007",
    "\u0004\u0002\u0002\u01b1\u01c0\u0003\u0002\u0002\u0002\u01b2\u01b4\u0007",
    "c\u0002\u0002\u01b3\u01b2\u0003\u0002\u0002\u0002\u01b3\u01b4\u0003",
    "\u0002\u0002\u0002\u01b4\u01b5\u0003\u0002\u0002\u0002\u01b5\u01b6\u0005",
    "F$\u0002\u01b6\u01b7\u0005N(\u0002\u01b7\u01b8\u0007\u0004\u0002\u0002",
    "\u01b8\u01c0\u0003\u0002\u0002\u0002\u01b9\u01bb\u0007c\u0002\u0002",
    "\u01ba\u01b9\u0003\u0002\u0002\u0002\u01ba\u01bb\u0003\u0002\u0002\u0002",
    "\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc\u01bd\u0005F$\u0002\u01bd",
    "\u01be\u0007\u0004\u0002\u0002\u01be\u01c0\u0003\u0002\u0002\u0002\u01bf",
    "\u01a7\u0003\u0002\u0002\u0002\u01bf\u01b3\u0003\u0002\u0002\u0002\u01bf",
    "\u01ba\u0003\u0002\u0002\u0002\u01c0C\u0003\u0002\u0002\u0002\u01c1",
    "\u01c3\u0007c\u0002\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c2",
    "\u01c3\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4",
    "\u01c5\u0005R*\u0002\u01c5\u01c6\u0007&\u0002\u0002\u01c6\u01c9\u0005",
    "\u0086D\u0002\u01c7\u01c8\u0007\u0003\u0002\u0002\u01c8\u01ca\u0005",
    "N(\u0002\u01c9\u01c7\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002",
    "\u0002\u0002\u01ca\u01cb\u0003\u0002\u0002\u0002\u01cb\u01cc\u0007\u0004",
    "\u0002\u0002\u01cc\u01db\u0003\u0002\u0002\u0002\u01cd\u01cf\u0007c",
    "\u0002\u0002\u01ce\u01cd\u0003\u0002\u0002\u0002\u01ce\u01cf\u0003\u0002",
    "\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d1\u0005R",
    "*\u0002\u01d1\u01d2\u0005N(\u0002\u01d2\u01d3\u0007\u0004\u0002\u0002",
    "\u01d3\u01db\u0003\u0002\u0002\u0002\u01d4\u01d6\u0007c\u0002\u0002",
    "\u01d5\u01d4\u0003\u0002\u0002\u0002\u01d5\u01d6\u0003\u0002\u0002\u0002",
    "\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7\u01d8\u0005R*\u0002\u01d8",
    "\u01d9\u0007\u0004\u0002\u0002\u01d9\u01db\u0003\u0002\u0002\u0002\u01da",
    "\u01c2\u0003\u0002\u0002\u0002\u01da\u01ce\u0003\u0002\u0002\u0002\u01da",
    "\u01d5\u0003\u0002\u0002\u0002\u01dbE\u0003\u0002\u0002\u0002\u01dc",
    "\u01dd\u0007\u0007\u0002\u0002\u01dd\u01e2\u0005H%\u0002\u01de\u01df",
    "\u0007\u0003\u0002\u0002\u01df\u01e1\u0005H%\u0002\u01e0\u01de\u0003",
    "\u0002\u0002\u0002\u01e1\u01e4\u0003\u0002\u0002\u0002\u01e2\u01e0\u0003",
    "\u0002\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3\u01e5\u0003",
    "\u0002\u0002\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002\u01e5\u01e6\u0007",
    "\b\u0002\u0002\u01e6G\u0003\u0002\u0002\u0002\u01e7\u01e8\u0005\u0086",
    "D\u0002\u01e8\u01e9\u0007\t\u0002\u0002\u01e9\u01ea\u0005J&\u0002\u01ea",
    "\u01ed\u0003\u0002\u0002\u0002\u01eb\u01ed\u0005J&\u0002\u01ec\u01e7",
    "\u0003\u0002\u0002\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01edI",
    "\u0003\u0002\u0002\u0002\u01ee\u01ef\u0007c\u0002\u0002\u01efK\u0003",
    "\u0002\u0002\u0002\u01f0\u01f1\u0007\"\u0002\u0002\u01f1\u01f2\u0007",
    "c\u0002\u0002\u01f2M\u0003\u0002\u0002\u0002\u01f3\u01f8\u0005P)\u0002",
    "\u01f4\u01f5\u0007\u0003\u0002\u0002\u01f5\u01f7\u0005P)\u0002\u01f6",
    "\u01f4\u0003\u0002\u0002\u0002\u01f7\u01fa\u0003\u0002\u0002\u0002\u01f8",
    "\u01f6\u0003\u0002\u0002\u0002\u01f8\u01f9\u0003\u0002\u0002\u0002\u01f9",
    "O\u0003\u0002\u0002\u0002\u01fa\u01f8\u0003\u0002\u0002\u0002\u01fb",
    "\u01fc\u0007-\u0002\u0002\u01fc\u01ff\u0005\u0088E\u0002\u01fd\u0200",
    "\u0007c\u0002\u0002\u01fe\u0200\u0005R*\u0002\u01ff\u01fd\u0003\u0002",
    "\u0002\u0002\u01ff\u01fe\u0003\u0002\u0002\u0002\u0200\u0202\u0003\u0002",
    "\u0002\u0002\u0201\u0203\u0005L\'\u0002\u0202\u0201\u0003\u0002\u0002",
    "\u0002\u0202\u0203\u0003\u0002\u0002\u0002\u0203Q\u0003\u0002\u0002",
    "\u0002\u0204\u0207\u0005T+\u0002\u0205\u0207\u0005V,\u0002\u0206\u0204",
    "\u0003\u0002\u0002\u0002\u0206\u0205\u0003\u0002\u0002\u0002\u0207S",
    "\u0003\u0002\u0002\u0002\u0208\u0209\u0005\u0094K\u0002\u0209U\u0003",
    "\u0002\u0002\u0002\u020a\u020b\u0005X-\u0002\u020b\u020c\u0005Z.\u0002",
    "\u020c\u0212\u0003\u0002\u0002\u0002\u020d\u020e\u0007K\u0002\u0002",
    "\u020e\u0212\u0005\\/\u0002\u020f\u0210\u0007N\u0002\u0002\u0210\u0212",
    "\u0005\u0096L\u0002\u0211\u020a\u0003\u0002\u0002\u0002\u0211\u020d",
    "\u0003\u0002\u0002\u0002\u0211\u020f\u0003\u0002\u0002\u0002\u0212W",
    "\u0003\u0002\u0002\u0002\u0213\u0214\t\u0003\u0002\u0002\u0214Y\u0003",
    "\u0002\u0002\u0002\u0215\u0218\u0005\u0094K\u0002\u0216\u0218\u0007",
    "c\u0002\u0002\u0217\u0215\u0003\u0002\u0002\u0002\u0217\u0216\u0003",
    "\u0002\u0002\u0002\u0218[\u0003\u0002\u0002\u0002\u0219\u021a\t\u0004",
    "\u0002\u0002\u021a]\u0003\u0002\u0002\u0002\u021b\u0221\u0005b2\u0002",
    "\u021c\u0221\u0005d3\u0002\u021d\u0221\u0005f4\u0002\u021e\u0221\u0005",
    "h5\u0002\u021f\u0221\u0005j6\u0002\u0220\u021b\u0003\u0002\u0002\u0002",
    "\u0220\u021c\u0003\u0002\u0002\u0002\u0220\u021d\u0003\u0002\u0002\u0002",
    "\u0220\u021e\u0003\u0002\u0002\u0002\u0220\u021f\u0003\u0002\u0002\u0002",
    "\u0221_\u0003\u0002\u0002\u0002\u0222\u0223\t\u0005\u0002\u0002\u0223",
    "a\u0003\u0002\u0002\u0002\u0224\u0226\u00075\u0002\u0002\u0225\u0227",
    "\u0005l7\u0002\u0226\u0225\u0003\u0002\u0002\u0002\u0226\u0227\u0003",
    "\u0002\u0002\u0002\u0227\u0228\u0003\u0002\u0002\u0002\u0228\u0229\u0007",
    "\u0004\u0002\u0002\u0229c\u0003\u0002\u0002\u0002\u022a\u022b\u0005",
    "`1\u0002\u022b\u0230\u0005n8\u0002\u022c\u022d\u0007\u0003\u0002\u0002",
    "\u022d\u022f\u0005n8\u0002\u022e\u022c\u0003\u0002\u0002\u0002\u022f",
    "\u0232\u0003\u0002\u0002\u0002\u0230\u022e\u0003\u0002\u0002\u0002\u0230",
    "\u0231\u0003\u0002\u0002\u0002\u0231\u0233\u0003\u0002\u0002\u0002\u0232",
    "\u0230\u0003\u0002\u0002\u0002\u0233\u0234\u0007\u0004\u0002\u0002\u0234",
    "e\u0003\u0002\u0002\u0002\u0235\u0236\u0007=\u0002\u0002\u0236\u023b",
    "\u0005p9\u0002\u0237\u0238\u0007\u0003\u0002\u0002\u0238\u023a\u0005",
    "p9\u0002\u0239\u0237\u0003\u0002\u0002\u0002\u023a\u023d\u0003\u0002",
    "\u0002\u0002\u023b\u0239\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002",
    "\u0002\u0002\u023c\u023e\u0003\u0002\u0002\u0002\u023d\u023b\u0003\u0002",
    "\u0002\u0002\u023e\u023f\u0007\u0004\u0002\u0002\u023fg\u0003\u0002",
    "\u0002\u0002\u0240\u0241\u0007<\u0002\u0002\u0241\u0246\u0005r:\u0002",
    "\u0242\u0243\u0007\u0003\u0002\u0002\u0243\u0245\u0005r:\u0002\u0244",
    "\u0242\u0003\u0002\u0002\u0002\u0245\u0248\u0003\u0002\u0002\u0002\u0246",
    "\u0244\u0003\u0002\u0002\u0002\u0246\u0247\u0003\u0002\u0002\u0002\u0247",
    "\u0249\u0003\u0002\u0002\u0002\u0248\u0246\u0003\u0002\u0002\u0002\u0249",
    "\u024a\u0007\u0004\u0002\u0002\u024ai\u0003\u0002\u0002\u0002\u024b",
    "\u024c\u0007>\u0002\u0002\u024c\u0251\u0005t;\u0002\u024d\u024e\u0007",
    "\u0003\u0002\u0002\u024e\u0250\u0005t;\u0002\u024f\u024d\u0003\u0002",
    "\u0002\u0002\u0250\u0253\u0003\u0002\u0002\u0002\u0251\u024f\u0003\u0002",
    "\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002\u0252\u0254\u0003\u0002",
    "\u0002\u0002\u0253\u0251\u0003\u0002\u0002\u0002\u0254\u0255\u0007\u0004",
    "\u0002\u0002\u0255k\u0003\u0002\u0002\u0002\u0256\u0257\u0005z>\u0002",
    "\u0257m\u0003\u0002\u0002\u0002\u0258\u025b\u0005z>\u0002\u0259\u025b",
    "\u0005x=\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025a\u0259\u0003",
    "\u0002\u0002\u0002\u025bo\u0003\u0002\u0002\u0002\u025c\u0260\u0005",
    "z>\u0002\u025d\u0260\u0005x=\u0002\u025e\u0260\u0005|?\u0002\u025f\u025c",
    "\u0003\u0002\u0002\u0002\u025f\u025d\u0003\u0002\u0002\u0002\u025f\u025e",
    "\u0003\u0002\u0002\u0002\u0260q\u0003\u0002\u0002\u0002\u0261\u0264",
    "\u0005z>\u0002\u0262\u0264\u0005|?\u0002\u0263\u0261\u0003\u0002\u0002",
    "\u0002\u0263\u0262\u0003\u0002\u0002\u0002\u0264s\u0003\u0002\u0002",
    "\u0002\u0265\u0268\u0005z>\u0002\u0266\u0268\u0005v<\u0002\u0267\u0265",
    "\u0003\u0002\u0002\u0002\u0267\u0266\u0003\u0002\u0002\u0002\u0268u",
    "\u0003\u0002\u0002\u0002\u0269\u026a\u0007B\u0002\u0002\u026a\u026e",
    "\u0007f\u0002\u0002\u026b\u026c\u0007C\u0002\u0002\u026c\u026e\u0007",
    "f\u0002\u0002\u026d\u0269\u0003\u0002\u0002\u0002\u026d\u026b\u0003",
    "\u0002\u0002\u0002\u026ew\u0003\u0002\u0002\u0002\u026f\u0270\u0007",
    "D\u0002\u0002\u0270\u0271\u0005\u008aF\u0002\u0271y\u0003\u0002\u0002",
    "\u0002\u0272\u0273\u0007E\u0002\u0002\u0273\u0274\u0005\u008aF\u0002",
    "\u0274{\u0003\u0002\u0002\u0002\u0275\u0276\u0007F\u0002\u0002\u0276",
    "\u027a\u0005~@\u0002\u0277\u0278\u0007G\u0002\u0002\u0278\u027a\u0005",
    "\u0080A\u0002\u0279\u0275\u0003\u0002\u0002\u0002\u0279\u0277\u0003",
    "\u0002\u0002\u0002\u027a}\u0003\u0002\u0002\u0002\u027b\u027c\t\u0006",
    "\u0002\u0002\u027c\u007f\u0003\u0002\u0002\u0002\u027d\u0280\u0005\u0084",
    "C\u0002\u027e\u0280\u0005\u0082B\u0002\u027f\u027d\u0003\u0002\u0002",
    "\u0002\u027f\u027e\u0003\u0002\u0002\u0002\u0280\u0081\u0003\u0002\u0002",
    "\u0002\u0281\u0282\u0007\n\u0002\u0002\u0282\u0287\u0005\u0084C\u0002",
    "\u0283\u0284\u0007\u0003\u0002\u0002\u0284\u0286\u0005\u0084C\u0002",
    "\u0285\u0283\u0003\u0002\u0002\u0002\u0286\u0289\u0003\u0002\u0002\u0002",
    "\u0287\u0285\u0003\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002\u0002",
    "\u0288\u028a\u0003\u0002\u0002\u0002\u0289\u0287\u0003\u0002\u0002\u0002",
    "\u028a\u028b\u0007\u000b\u0002\u0002\u028b\u0083\u0003\u0002\u0002\u0002",
    "\u028c\u028d\u0007H\u0002\u0002\u028d\u028e\u0007\f\u0002\u0002\u028e",
    "\u0299\u0007_\u0002\u0002\u028f\u0290\u0007I\u0002\u0002\u0290\u0291",
    "\u0007\f\u0002\u0002\u0291\u0299\u0007_\u0002\u0002\u0292\u0293\u0007",
    "J\u0002\u0002\u0293\u0294\u0007\f\u0002\u0002\u0294\u0299\u0007_\u0002",
    "\u0002\u0295\u0296\u0007K\u0002\u0002\u0296\u0297\u0007\f\u0002\u0002",
    "\u0297\u0299\u0007f\u0002\u0002\u0298\u028c\u0003\u0002\u0002\u0002",
    "\u0298\u028f\u0003\u0002\u0002\u0002\u0298\u0292\u0003\u0002\u0002\u0002",
    "\u0298\u0295\u0003\u0002\u0002\u0002\u0299\u0085\u0003\u0002\u0002\u0002",
    "\u029a\u029d\u0005\u0088E\u0002\u029b\u029d\u0007c\u0002\u0002\u029c",
    "\u029a\u0003\u0002\u0002\u0002\u029c\u029b\u0003\u0002\u0002\u0002\u029d",
    "\u0087\u0003\u0002\u0002\u0002\u029e\u02a2\u0005\u008eH\u0002\u029f",
    "\u02a2\u0005\u0090I\u0002\u02a0\u02a2\u0005\u0098M\u0002\u02a1\u029e",
    "\u0003\u0002\u0002\u0002\u02a1\u029f\u0003\u0002\u0002\u0002\u02a1\u02a0",
    "\u0003\u0002\u0002\u0002\u02a2\u0089\u0003\u0002\u0002\u0002\u02a3\u02a6",
    "\u0005\u0088E\u0002\u02a4\u02a6\u0005\u008cG\u0002\u02a5\u02a3\u0003",
    "\u0002\u0002\u0002\u02a5\u02a4\u0003\u0002\u0002\u0002\u02a6\u008b\u0003",
    "\u0002\u0002\u0002\u02a7\u02a8\u0007\n\u0002\u0002\u02a8\u02ad\u0005",
    "\u0088E\u0002\u02a9\u02aa\u0007\u0003\u0002\u0002\u02aa\u02ac\u0005",
    "\u0088E\u0002\u02ab\u02a9\u0003\u0002\u0002\u0002\u02ac\u02af\u0003",
    "\u0002\u0002\u0002\u02ad\u02ab\u0003\u0002\u0002\u0002\u02ad\u02ae\u0003",
    "\u0002\u0002\u0002\u02ae\u02b0\u0003\u0002\u0002\u0002\u02af\u02ad\u0003",
    "\u0002\u0002\u0002\u02b0\u02b1\u0007\u000b\u0002\u0002\u02b1\u008d\u0003",
    "\u0002\u0002\u0002\u02b2\u02b3\t\u0007\u0002\u0002\u02b3\u008f\u0003",
    "\u0002\u0002\u0002\u02b4\u02b5\t\b\u0002\u0002\u02b5\u0091\u0003\u0002",
    "\u0002\u0002\u02b6\u02b7\t\t\u0002\u0002\u02b7\u0093\u0003\u0002\u0002",
    "\u0002\u02b8\u02b9\t\n\u0002\u0002\u02b9\u0095\u0003\u0002\u0002\u0002",
    "\u02ba\u02bb\u0007^\u0002\u0002\u02bb\u0097\u0003\u0002\u0002\u0002",
    "\u02bc\u02bd\t\u000b\u0002\u0002\u02bd\u0099\u0003\u0002\u0002\u0002",
    "F\u00a0\u00aa\u00b7\u00bd\u00c3\u00c9\u00cf\u00d5\u00d7\u00dd\u00e7",
    "\u00ff\u0102\u0107\u010a\u010d\u0112\u0120\u012d\u0133\u0144\u0150\u0158",
    "\u016a\u0175\u017e\u0184\u0189\u0190\u0199\u01a4\u01a7\u01ae\u01b3\u01ba",
    "\u01bf\u01c2\u01c9\u01ce\u01d5\u01da\u01e2\u01ec\u01f8\u01ff\u0202\u0206",
    "\u0211\u0217\u0220\u0226\u0230\u023b\u0246\u0251\u025a\u025f\u0263\u0267",
    "\u026d\u0279\u027f\u0287\u0298\u029c\u02a1\u02a5\u02ad"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "','", "';'", "'{'", "'}'", "'('", "')'", "':'", 
                     "'['", "']'", "'='", "'match'", "'get'", "'define'", 
                     "'undefine'", "'insert'", "'delete'", "'aggregate'", 
                     "'compute'", "'thing'", "'entity'", "'attribute'", 
                     "'relation'", "'role'", "'rule'", "'offset'", "'limit'", 
                     "'sort'", null, "'asc'", "'desc'", "'abstract'", "'via'", 
                     "'as'", "'id'", "'type'", null, null, "'isa'", "'isa!'", 
                     "'sub'", "'sub!'", "'key'", "'has'", "'plays'", "'relates'", 
                     "'datatype'", "'regex'", "'when'", "'then'", "'group'", 
                     "'count'", "'max'", "'min'", "'mean'", "'median'", 
                     "'std'", "'sum'", "'cluster'", "'centrality'", "'path'", 
                     "'degree'", "'k-core'", "'connected-component'", "'from'", 
                     "'to'", "'of'", "'in'", "'using'", "'where'", "'min-k'", 
                     "'k'", "'size'", "'contains'", "'or'", "'not'", "'like'", 
                     "'!='", "'=='", "'!=='", "'>'", "'>='", "'<'", "'<='", 
                     "'long'", "'double'", "'string'", "'boolean'", "'date'", 
                     null, "'true'", "'false'", null, null, null, null, 
                     null, null, "'$_'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, "MATCH", "GET", "DEFINE", "UNDEFINE", 
                      "INSERT", "DELETE", "AGGREGATE", "COMPUTE", "THING", 
                      "ENTITY", "ATTRIBUTE", "RELATION", "ROLE", "RULE", 
                      "OFFSET", "LIMIT", "SORT", "ORDER_", "ASC", "DESC", 
                      "ABSTRACT", "VIA", "AS", "ID", "TYPE", "ISA_", "SUB_", 
                      "ISA", "ISAX", "SUB", "SUBX", "KEY", "HAS", "PLAYS", 
                      "RELATES", "DATATYPE", "REGEX", "WHEN", "THEN", "GROUP", 
                      "COUNT", "MAX", "MIN", "MEAN", "MEDIAN", "STD", "SUM", 
                      "CLUSTER", "CENTRALITY", "PATH", "DEGREE", "K_CORE", 
                      "CONNECTED_COMPONENT", "FROM", "TO", "OF", "IN", "USING", 
                      "WHERE", "MIN_K", "K", "SIZE", "CONTAINS", "OR", "NOT", 
                      "LIKE", "NEQ", "EQV", "NEQV", "GT", "GTE", "LT", "LTE", 
                      "LONG", "DOUBLE", "STRING", "BOOLEAN", "DATE", "BOOLEAN_", 
                      "TRUE", "FALSE", "STRING_", "INTEGER_", "REAL_", "DATE_", 
                      "DATETIME_", "VAR_", "VAR_ANONYMOUS_", "VAR_NAMED_", 
                      "ID_", "TYPE_IMPLICIT_", "TYPE_NAME_", "COMMENT", 
                      "WS" ];

var ruleNames =  [ "eof_query", "eof_query_list", "eof_pattern", "eof_pattern_list", 
                   "query", "query_define", "query_undefine", "query_insert", 
                   "query_delete", "query_get", "query_compute", "query_get_aggregate", 
                   "query_get_group", "query_get_group_agg", "variables", 
                   "filters", "sort", "offset", "limit", "function_aggregate", 
                   "function_method", "function_group", "patterns", "pattern", 
                   "pattern_conjunction", "pattern_disjunction", "pattern_negation", 
                   "pattern_statement", "statement_type", "type_property", 
                   "statement_instance", "statement_thing", "statement_relation", 
                   "statement_attribute", "relation", "role_player", "player", 
                   "via", "attributes", "attribute", "operation", "assignment", 
                   "comparison", "comparator", "comparable", "containable", 
                   "compute_conditions", "compute_method", "conditions_count", 
                   "conditions_value", "conditions_central", "conditions_cluster", 
                   "conditions_path", "input_count", "input_value", "input_central", 
                   "input_cluster", "input_path", "compute_direction", "compute_target", 
                   "compute_scope", "compute_config", "compute_algorithm", 
                   "compute_args", "compute_args_array", "compute_arg", 
                   "type", "type_label", "type_labels", "type_label_array", 
                   "type_native", "type_name", "datatype", "literal", "regex", 
                   "unreserved" ];

function GraqlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

GraqlParser.prototype = Object.create(antlr4.Parser.prototype);
GraqlParser.prototype.constructor = GraqlParser;

Object.defineProperty(GraqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

GraqlParser.EOF = antlr4.Token.EOF;
GraqlParser.T__0 = 1;
GraqlParser.T__1 = 2;
GraqlParser.T__2 = 3;
GraqlParser.T__3 = 4;
GraqlParser.T__4 = 5;
GraqlParser.T__5 = 6;
GraqlParser.T__6 = 7;
GraqlParser.T__7 = 8;
GraqlParser.T__8 = 9;
GraqlParser.T__9 = 10;
GraqlParser.MATCH = 11;
GraqlParser.GET = 12;
GraqlParser.DEFINE = 13;
GraqlParser.UNDEFINE = 14;
GraqlParser.INSERT = 15;
GraqlParser.DELETE = 16;
GraqlParser.AGGREGATE = 17;
GraqlParser.COMPUTE = 18;
GraqlParser.THING = 19;
GraqlParser.ENTITY = 20;
GraqlParser.ATTRIBUTE = 21;
GraqlParser.RELATION = 22;
GraqlParser.ROLE = 23;
GraqlParser.RULE = 24;
GraqlParser.OFFSET = 25;
GraqlParser.LIMIT = 26;
GraqlParser.SORT = 27;
GraqlParser.ORDER_ = 28;
GraqlParser.ASC = 29;
GraqlParser.DESC = 30;
GraqlParser.ABSTRACT = 31;
GraqlParser.VIA = 32;
GraqlParser.AS = 33;
GraqlParser.ID = 34;
GraqlParser.TYPE = 35;
GraqlParser.ISA_ = 36;
GraqlParser.SUB_ = 37;
GraqlParser.ISA = 38;
GraqlParser.ISAX = 39;
GraqlParser.SUB = 40;
GraqlParser.SUBX = 41;
GraqlParser.KEY = 42;
GraqlParser.HAS = 43;
GraqlParser.PLAYS = 44;
GraqlParser.RELATES = 45;
GraqlParser.DATATYPE = 46;
GraqlParser.REGEX = 47;
GraqlParser.WHEN = 48;
GraqlParser.THEN = 49;
GraqlParser.GROUP = 50;
GraqlParser.COUNT = 51;
GraqlParser.MAX = 52;
GraqlParser.MIN = 53;
GraqlParser.MEAN = 54;
GraqlParser.MEDIAN = 55;
GraqlParser.STD = 56;
GraqlParser.SUM = 57;
GraqlParser.CLUSTER = 58;
GraqlParser.CENTRALITY = 59;
GraqlParser.PATH = 60;
GraqlParser.DEGREE = 61;
GraqlParser.K_CORE = 62;
GraqlParser.CONNECTED_COMPONENT = 63;
GraqlParser.FROM = 64;
GraqlParser.TO = 65;
GraqlParser.OF = 66;
GraqlParser.IN = 67;
GraqlParser.USING = 68;
GraqlParser.WHERE = 69;
GraqlParser.MIN_K = 70;
GraqlParser.K = 71;
GraqlParser.SIZE = 72;
GraqlParser.CONTAINS = 73;
GraqlParser.OR = 74;
GraqlParser.NOT = 75;
GraqlParser.LIKE = 76;
GraqlParser.NEQ = 77;
GraqlParser.EQV = 78;
GraqlParser.NEQV = 79;
GraqlParser.GT = 80;
GraqlParser.GTE = 81;
GraqlParser.LT = 82;
GraqlParser.LTE = 83;
GraqlParser.LONG = 84;
GraqlParser.DOUBLE = 85;
GraqlParser.STRING = 86;
GraqlParser.BOOLEAN = 87;
GraqlParser.DATE = 88;
GraqlParser.BOOLEAN_ = 89;
GraqlParser.TRUE = 90;
GraqlParser.FALSE = 91;
GraqlParser.STRING_ = 92;
GraqlParser.INTEGER_ = 93;
GraqlParser.REAL_ = 94;
GraqlParser.DATE_ = 95;
GraqlParser.DATETIME_ = 96;
GraqlParser.VAR_ = 97;
GraqlParser.VAR_ANONYMOUS_ = 98;
GraqlParser.VAR_NAMED_ = 99;
GraqlParser.ID_ = 100;
GraqlParser.TYPE_IMPLICIT_ = 101;
GraqlParser.TYPE_NAME_ = 102;
GraqlParser.COMMENT = 103;
GraqlParser.WS = 104;

GraqlParser.RULE_eof_query = 0;
GraqlParser.RULE_eof_query_list = 1;
GraqlParser.RULE_eof_pattern = 2;
GraqlParser.RULE_eof_pattern_list = 3;
GraqlParser.RULE_query = 4;
GraqlParser.RULE_query_define = 5;
GraqlParser.RULE_query_undefine = 6;
GraqlParser.RULE_query_insert = 7;
GraqlParser.RULE_query_delete = 8;
GraqlParser.RULE_query_get = 9;
GraqlParser.RULE_query_compute = 10;
GraqlParser.RULE_query_get_aggregate = 11;
GraqlParser.RULE_query_get_group = 12;
GraqlParser.RULE_query_get_group_agg = 13;
GraqlParser.RULE_variables = 14;
GraqlParser.RULE_filters = 15;
GraqlParser.RULE_sort = 16;
GraqlParser.RULE_offset = 17;
GraqlParser.RULE_limit = 18;
GraqlParser.RULE_function_aggregate = 19;
GraqlParser.RULE_function_method = 20;
GraqlParser.RULE_function_group = 21;
GraqlParser.RULE_patterns = 22;
GraqlParser.RULE_pattern = 23;
GraqlParser.RULE_pattern_conjunction = 24;
GraqlParser.RULE_pattern_disjunction = 25;
GraqlParser.RULE_pattern_negation = 26;
GraqlParser.RULE_pattern_statement = 27;
GraqlParser.RULE_statement_type = 28;
GraqlParser.RULE_type_property = 29;
GraqlParser.RULE_statement_instance = 30;
GraqlParser.RULE_statement_thing = 31;
GraqlParser.RULE_statement_relation = 32;
GraqlParser.RULE_statement_attribute = 33;
GraqlParser.RULE_relation = 34;
GraqlParser.RULE_role_player = 35;
GraqlParser.RULE_player = 36;
GraqlParser.RULE_via = 37;
GraqlParser.RULE_attributes = 38;
GraqlParser.RULE_attribute = 39;
GraqlParser.RULE_operation = 40;
GraqlParser.RULE_assignment = 41;
GraqlParser.RULE_comparison = 42;
GraqlParser.RULE_comparator = 43;
GraqlParser.RULE_comparable = 44;
GraqlParser.RULE_containable = 45;
GraqlParser.RULE_compute_conditions = 46;
GraqlParser.RULE_compute_method = 47;
GraqlParser.RULE_conditions_count = 48;
GraqlParser.RULE_conditions_value = 49;
GraqlParser.RULE_conditions_central = 50;
GraqlParser.RULE_conditions_cluster = 51;
GraqlParser.RULE_conditions_path = 52;
GraqlParser.RULE_input_count = 53;
GraqlParser.RULE_input_value = 54;
GraqlParser.RULE_input_central = 55;
GraqlParser.RULE_input_cluster = 56;
GraqlParser.RULE_input_path = 57;
GraqlParser.RULE_compute_direction = 58;
GraqlParser.RULE_compute_target = 59;
GraqlParser.RULE_compute_scope = 60;
GraqlParser.RULE_compute_config = 61;
GraqlParser.RULE_compute_algorithm = 62;
GraqlParser.RULE_compute_args = 63;
GraqlParser.RULE_compute_args_array = 64;
GraqlParser.RULE_compute_arg = 65;
GraqlParser.RULE_type = 66;
GraqlParser.RULE_type_label = 67;
GraqlParser.RULE_type_labels = 68;
GraqlParser.RULE_type_label_array = 69;
GraqlParser.RULE_type_native = 70;
GraqlParser.RULE_type_name = 71;
GraqlParser.RULE_datatype = 72;
GraqlParser.RULE_literal = 73;
GraqlParser.RULE_regex = 74;
GraqlParser.RULE_unreserved = 75;


function Eof_queryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_eof_query;
    return this;
}

Eof_queryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eof_queryContext.prototype.constructor = Eof_queryContext;

Eof_queryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

Eof_queryContext.prototype.EOF = function() {
    return this.getToken(GraqlParser.EOF, 0);
};

Eof_queryContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterEof_query(this);
	}
};

Eof_queryContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitEof_query(this);
	}
};

Eof_queryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitEof_query(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Eof_queryContext = Eof_queryContext;

GraqlParser.prototype.eof_query = function() {

    var localctx = new Eof_queryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, GraqlParser.RULE_eof_query);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 152;
        this.query();
        this.state = 153;
        this.match(GraqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Eof_query_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_eof_query_list;
    return this;
}

Eof_query_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eof_query_listContext.prototype.constructor = Eof_query_listContext;

Eof_query_listContext.prototype.EOF = function() {
    return this.getToken(GraqlParser.EOF, 0);
};

Eof_query_listContext.prototype.query = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryContext);
    } else {
        return this.getTypedRuleContext(QueryContext,i);
    }
};

Eof_query_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterEof_query_list(this);
	}
};

Eof_query_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitEof_query_list(this);
	}
};

Eof_query_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitEof_query_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Eof_query_listContext = Eof_query_listContext;

GraqlParser.prototype.eof_query_list = function() {

    var localctx = new Eof_query_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, GraqlParser.RULE_eof_query_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 156; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 155;
            this.query();
            this.state = 158; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GraqlParser.MATCH) | (1 << GraqlParser.DEFINE) | (1 << GraqlParser.UNDEFINE) | (1 << GraqlParser.INSERT) | (1 << GraqlParser.COMPUTE))) !== 0));
        this.state = 160;
        this.match(GraqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Eof_patternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_eof_pattern;
    return this;
}

Eof_patternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eof_patternContext.prototype.constructor = Eof_patternContext;

Eof_patternContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

Eof_patternContext.prototype.EOF = function() {
    return this.getToken(GraqlParser.EOF, 0);
};

Eof_patternContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterEof_pattern(this);
	}
};

Eof_patternContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitEof_pattern(this);
	}
};

Eof_patternContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitEof_pattern(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Eof_patternContext = Eof_patternContext;

GraqlParser.prototype.eof_pattern = function() {

    var localctx = new Eof_patternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, GraqlParser.RULE_eof_pattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 162;
        this.pattern();
        this.state = 163;
        this.match(GraqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Eof_pattern_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_eof_pattern_list;
    return this;
}

Eof_pattern_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eof_pattern_listContext.prototype.constructor = Eof_pattern_listContext;

Eof_pattern_listContext.prototype.EOF = function() {
    return this.getToken(GraqlParser.EOF, 0);
};

Eof_pattern_listContext.prototype.pattern = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternContext);
    } else {
        return this.getTypedRuleContext(PatternContext,i);
    }
};

Eof_pattern_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterEof_pattern_list(this);
	}
};

Eof_pattern_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitEof_pattern_list(this);
	}
};

Eof_pattern_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitEof_pattern_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Eof_pattern_listContext = Eof_pattern_listContext;

GraqlParser.prototype.eof_pattern_list = function() {

    var localctx = new Eof_pattern_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, GraqlParser.RULE_eof_pattern_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 166; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 165;
            this.pattern();
            this.state = 168; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GraqlParser.T__2) | (1 << GraqlParser.T__4) | (1 << GraqlParser.THING) | (1 << GraqlParser.ENTITY) | (1 << GraqlParser.ATTRIBUTE) | (1 << GraqlParser.RELATION) | (1 << GraqlParser.ROLE) | (1 << GraqlParser.RULE))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GraqlParser.COUNT - 51)) | (1 << (GraqlParser.MAX - 51)) | (1 << (GraqlParser.MIN - 51)) | (1 << (GraqlParser.MEAN - 51)) | (1 << (GraqlParser.MEDIAN - 51)) | (1 << (GraqlParser.STD - 51)) | (1 << (GraqlParser.SUM - 51)) | (1 << (GraqlParser.CLUSTER - 51)) | (1 << (GraqlParser.PATH - 51)) | (1 << (GraqlParser.DEGREE - 51)) | (1 << (GraqlParser.K_CORE - 51)) | (1 << (GraqlParser.CONNECTED_COMPONENT - 51)) | (1 << (GraqlParser.FROM - 51)) | (1 << (GraqlParser.TO - 51)) | (1 << (GraqlParser.OF - 51)) | (1 << (GraqlParser.IN - 51)) | (1 << (GraqlParser.WHERE - 51)) | (1 << (GraqlParser.MIN_K - 51)) | (1 << (GraqlParser.K - 51)) | (1 << (GraqlParser.SIZE - 51)) | (1 << (GraqlParser.CONTAINS - 51)) | (1 << (GraqlParser.NOT - 51)) | (1 << (GraqlParser.LIKE - 51)) | (1 << (GraqlParser.EQV - 51)) | (1 << (GraqlParser.NEQV - 51)) | (1 << (GraqlParser.GT - 51)) | (1 << (GraqlParser.GTE - 51)) | (1 << (GraqlParser.LT - 51)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (GraqlParser.LTE - 83)) | (1 << (GraqlParser.BOOLEAN_ - 83)) | (1 << (GraqlParser.STRING_ - 83)) | (1 << (GraqlParser.INTEGER_ - 83)) | (1 << (GraqlParser.REAL_ - 83)) | (1 << (GraqlParser.DATE_ - 83)) | (1 << (GraqlParser.DATETIME_ - 83)) | (1 << (GraqlParser.VAR_ - 83)) | (1 << (GraqlParser.ID_ - 83)) | (1 << (GraqlParser.TYPE_IMPLICIT_ - 83)) | (1 << (GraqlParser.TYPE_NAME_ - 83)))) !== 0));
        this.state = 170;
        this.match(GraqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.query_define = function() {
    return this.getTypedRuleContext(Query_defineContext,0);
};

QueryContext.prototype.query_undefine = function() {
    return this.getTypedRuleContext(Query_undefineContext,0);
};

QueryContext.prototype.query_insert = function() {
    return this.getTypedRuleContext(Query_insertContext,0);
};

QueryContext.prototype.query_delete = function() {
    return this.getTypedRuleContext(Query_deleteContext,0);
};

QueryContext.prototype.query_get = function() {
    return this.getTypedRuleContext(Query_getContext,0);
};

QueryContext.prototype.query_get_aggregate = function() {
    return this.getTypedRuleContext(Query_get_aggregateContext,0);
};

QueryContext.prototype.query_get_group = function() {
    return this.getTypedRuleContext(Query_get_groupContext,0);
};

QueryContext.prototype.query_get_group_agg = function() {
    return this.getTypedRuleContext(Query_get_group_aggContext,0);
};

QueryContext.prototype.query_compute = function() {
    return this.getTypedRuleContext(Query_computeContext,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitQuery(this);
	}
};

QueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.QueryContext = QueryContext;

GraqlParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, GraqlParser.RULE_query);
    try {
        this.state = 181;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 172;
            this.query_define();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 173;
            this.query_undefine();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 174;
            this.query_insert();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 175;
            this.query_delete();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 176;
            this.query_get();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 177;
            this.query_get_aggregate();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 178;
            this.query_get_group();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 179;
            this.query_get_group_agg();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 180;
            this.query_compute();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Query_defineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_query_define;
    return this;
}

Query_defineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_defineContext.prototype.constructor = Query_defineContext;

Query_defineContext.prototype.DEFINE = function() {
    return this.getToken(GraqlParser.DEFINE, 0);
};

Query_defineContext.prototype.statement_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_typeContext);
    } else {
        return this.getTypedRuleContext(Statement_typeContext,i);
    }
};

Query_defineContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterQuery_define(this);
	}
};

Query_defineContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitQuery_define(this);
	}
};

Query_defineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitQuery_define(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Query_defineContext = Query_defineContext;

GraqlParser.prototype.query_define = function() {

    var localctx = new Query_defineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, GraqlParser.RULE_query_define);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 183;
        this.match(GraqlParser.DEFINE);
        this.state = 185; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 184;
            this.statement_type();
            this.state = 187; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GraqlParser.THING) | (1 << GraqlParser.ENTITY) | (1 << GraqlParser.ATTRIBUTE) | (1 << GraqlParser.RELATION) | (1 << GraqlParser.ROLE) | (1 << GraqlParser.RULE))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GraqlParser.COUNT - 51)) | (1 << (GraqlParser.MAX - 51)) | (1 << (GraqlParser.MIN - 51)) | (1 << (GraqlParser.MEAN - 51)) | (1 << (GraqlParser.MEDIAN - 51)) | (1 << (GraqlParser.STD - 51)) | (1 << (GraqlParser.SUM - 51)) | (1 << (GraqlParser.CLUSTER - 51)) | (1 << (GraqlParser.PATH - 51)) | (1 << (GraqlParser.DEGREE - 51)) | (1 << (GraqlParser.K_CORE - 51)) | (1 << (GraqlParser.CONNECTED_COMPONENT - 51)) | (1 << (GraqlParser.FROM - 51)) | (1 << (GraqlParser.TO - 51)) | (1 << (GraqlParser.OF - 51)) | (1 << (GraqlParser.IN - 51)) | (1 << (GraqlParser.WHERE - 51)) | (1 << (GraqlParser.MIN_K - 51)) | (1 << (GraqlParser.K - 51)) | (1 << (GraqlParser.SIZE - 51)) | (1 << (GraqlParser.CONTAINS - 51)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (GraqlParser.VAR_ - 97)) | (1 << (GraqlParser.ID_ - 97)) | (1 << (GraqlParser.TYPE_IMPLICIT_ - 97)) | (1 << (GraqlParser.TYPE_NAME_ - 97)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Query_undefineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_query_undefine;
    return this;
}

Query_undefineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_undefineContext.prototype.constructor = Query_undefineContext;

Query_undefineContext.prototype.UNDEFINE = function() {
    return this.getToken(GraqlParser.UNDEFINE, 0);
};

Query_undefineContext.prototype.statement_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_typeContext);
    } else {
        return this.getTypedRuleContext(Statement_typeContext,i);
    }
};

Query_undefineContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterQuery_undefine(this);
	}
};

Query_undefineContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitQuery_undefine(this);
	}
};

Query_undefineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitQuery_undefine(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Query_undefineContext = Query_undefineContext;

GraqlParser.prototype.query_undefine = function() {

    var localctx = new Query_undefineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, GraqlParser.RULE_query_undefine);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 189;
        this.match(GraqlParser.UNDEFINE);
        this.state = 191; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 190;
            this.statement_type();
            this.state = 193; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GraqlParser.THING) | (1 << GraqlParser.ENTITY) | (1 << GraqlParser.ATTRIBUTE) | (1 << GraqlParser.RELATION) | (1 << GraqlParser.ROLE) | (1 << GraqlParser.RULE))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GraqlParser.COUNT - 51)) | (1 << (GraqlParser.MAX - 51)) | (1 << (GraqlParser.MIN - 51)) | (1 << (GraqlParser.MEAN - 51)) | (1 << (GraqlParser.MEDIAN - 51)) | (1 << (GraqlParser.STD - 51)) | (1 << (GraqlParser.SUM - 51)) | (1 << (GraqlParser.CLUSTER - 51)) | (1 << (GraqlParser.PATH - 51)) | (1 << (GraqlParser.DEGREE - 51)) | (1 << (GraqlParser.K_CORE - 51)) | (1 << (GraqlParser.CONNECTED_COMPONENT - 51)) | (1 << (GraqlParser.FROM - 51)) | (1 << (GraqlParser.TO - 51)) | (1 << (GraqlParser.OF - 51)) | (1 << (GraqlParser.IN - 51)) | (1 << (GraqlParser.WHERE - 51)) | (1 << (GraqlParser.MIN_K - 51)) | (1 << (GraqlParser.K - 51)) | (1 << (GraqlParser.SIZE - 51)) | (1 << (GraqlParser.CONTAINS - 51)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (GraqlParser.VAR_ - 97)) | (1 << (GraqlParser.ID_ - 97)) | (1 << (GraqlParser.TYPE_IMPLICIT_ - 97)) | (1 << (GraqlParser.TYPE_NAME_ - 97)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Query_insertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_query_insert;
    return this;
}

Query_insertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_insertContext.prototype.constructor = Query_insertContext;

Query_insertContext.prototype.MATCH = function() {
    return this.getToken(GraqlParser.MATCH, 0);
};

Query_insertContext.prototype.INSERT = function() {
    return this.getToken(GraqlParser.INSERT, 0);
};

Query_insertContext.prototype.pattern = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternContext);
    } else {
        return this.getTypedRuleContext(PatternContext,i);
    }
};

Query_insertContext.prototype.statement_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_instanceContext);
    } else {
        return this.getTypedRuleContext(Statement_instanceContext,i);
    }
};

Query_insertContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterQuery_insert(this);
	}
};

Query_insertContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitQuery_insert(this);
	}
};

Query_insertContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitQuery_insert(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Query_insertContext = Query_insertContext;

GraqlParser.prototype.query_insert = function() {

    var localctx = new Query_insertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, GraqlParser.RULE_query_insert);
    var _la = 0; // Token type
    try {
        this.state = 213;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.MATCH:
            this.enterOuterAlt(localctx, 1);
            this.state = 195;
            this.match(GraqlParser.MATCH);
            this.state = 197; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 196;
                this.pattern();
                this.state = 199; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GraqlParser.T__2) | (1 << GraqlParser.T__4) | (1 << GraqlParser.THING) | (1 << GraqlParser.ENTITY) | (1 << GraqlParser.ATTRIBUTE) | (1 << GraqlParser.RELATION) | (1 << GraqlParser.ROLE) | (1 << GraqlParser.RULE))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GraqlParser.COUNT - 51)) | (1 << (GraqlParser.MAX - 51)) | (1 << (GraqlParser.MIN - 51)) | (1 << (GraqlParser.MEAN - 51)) | (1 << (GraqlParser.MEDIAN - 51)) | (1 << (GraqlParser.STD - 51)) | (1 << (GraqlParser.SUM - 51)) | (1 << (GraqlParser.CLUSTER - 51)) | (1 << (GraqlParser.PATH - 51)) | (1 << (GraqlParser.DEGREE - 51)) | (1 << (GraqlParser.K_CORE - 51)) | (1 << (GraqlParser.CONNECTED_COMPONENT - 51)) | (1 << (GraqlParser.FROM - 51)) | (1 << (GraqlParser.TO - 51)) | (1 << (GraqlParser.OF - 51)) | (1 << (GraqlParser.IN - 51)) | (1 << (GraqlParser.WHERE - 51)) | (1 << (GraqlParser.MIN_K - 51)) | (1 << (GraqlParser.K - 51)) | (1 << (GraqlParser.SIZE - 51)) | (1 << (GraqlParser.CONTAINS - 51)) | (1 << (GraqlParser.NOT - 51)) | (1 << (GraqlParser.LIKE - 51)) | (1 << (GraqlParser.EQV - 51)) | (1 << (GraqlParser.NEQV - 51)) | (1 << (GraqlParser.GT - 51)) | (1 << (GraqlParser.GTE - 51)) | (1 << (GraqlParser.LT - 51)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (GraqlParser.LTE - 83)) | (1 << (GraqlParser.BOOLEAN_ - 83)) | (1 << (GraqlParser.STRING_ - 83)) | (1 << (GraqlParser.INTEGER_ - 83)) | (1 << (GraqlParser.REAL_ - 83)) | (1 << (GraqlParser.DATE_ - 83)) | (1 << (GraqlParser.DATETIME_ - 83)) | (1 << (GraqlParser.VAR_ - 83)) | (1 << (GraqlParser.ID_ - 83)) | (1 << (GraqlParser.TYPE_IMPLICIT_ - 83)) | (1 << (GraqlParser.TYPE_NAME_ - 83)))) !== 0));
            this.state = 201;
            this.match(GraqlParser.INSERT);
            this.state = 203; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 202;
                this.statement_instance();
                this.state = 205; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===GraqlParser.T__4 || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (GraqlParser.CONTAINS - 73)) | (1 << (GraqlParser.LIKE - 73)) | (1 << (GraqlParser.EQV - 73)) | (1 << (GraqlParser.NEQV - 73)) | (1 << (GraqlParser.GT - 73)) | (1 << (GraqlParser.GTE - 73)) | (1 << (GraqlParser.LT - 73)) | (1 << (GraqlParser.LTE - 73)) | (1 << (GraqlParser.BOOLEAN_ - 73)) | (1 << (GraqlParser.STRING_ - 73)) | (1 << (GraqlParser.INTEGER_ - 73)) | (1 << (GraqlParser.REAL_ - 73)) | (1 << (GraqlParser.DATE_ - 73)) | (1 << (GraqlParser.DATETIME_ - 73)) | (1 << (GraqlParser.VAR_ - 73)))) !== 0));
            break;
        case GraqlParser.INSERT:
            this.enterOuterAlt(localctx, 2);
            this.state = 207;
            this.match(GraqlParser.INSERT);
            this.state = 209; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 208;
                this.statement_instance();
                this.state = 211; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===GraqlParser.T__4 || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (GraqlParser.CONTAINS - 73)) | (1 << (GraqlParser.LIKE - 73)) | (1 << (GraqlParser.EQV - 73)) | (1 << (GraqlParser.NEQV - 73)) | (1 << (GraqlParser.GT - 73)) | (1 << (GraqlParser.GTE - 73)) | (1 << (GraqlParser.LT - 73)) | (1 << (GraqlParser.LTE - 73)) | (1 << (GraqlParser.BOOLEAN_ - 73)) | (1 << (GraqlParser.STRING_ - 73)) | (1 << (GraqlParser.INTEGER_ - 73)) | (1 << (GraqlParser.REAL_ - 73)) | (1 << (GraqlParser.DATE_ - 73)) | (1 << (GraqlParser.DATETIME_ - 73)) | (1 << (GraqlParser.VAR_ - 73)))) !== 0));
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Query_deleteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_query_delete;
    return this;
}

Query_deleteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_deleteContext.prototype.constructor = Query_deleteContext;

Query_deleteContext.prototype.MATCH = function() {
    return this.getToken(GraqlParser.MATCH, 0);
};

Query_deleteContext.prototype.DELETE = function() {
    return this.getToken(GraqlParser.DELETE, 0);
};

Query_deleteContext.prototype.variables = function() {
    return this.getTypedRuleContext(VariablesContext,0);
};

Query_deleteContext.prototype.filters = function() {
    return this.getTypedRuleContext(FiltersContext,0);
};

Query_deleteContext.prototype.pattern = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternContext);
    } else {
        return this.getTypedRuleContext(PatternContext,i);
    }
};

Query_deleteContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterQuery_delete(this);
	}
};

Query_deleteContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitQuery_delete(this);
	}
};

Query_deleteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitQuery_delete(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Query_deleteContext = Query_deleteContext;

GraqlParser.prototype.query_delete = function() {

    var localctx = new Query_deleteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, GraqlParser.RULE_query_delete);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 215;
        this.match(GraqlParser.MATCH);
        this.state = 217; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 216;
            this.pattern();
            this.state = 219; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GraqlParser.T__2) | (1 << GraqlParser.T__4) | (1 << GraqlParser.THING) | (1 << GraqlParser.ENTITY) | (1 << GraqlParser.ATTRIBUTE) | (1 << GraqlParser.RELATION) | (1 << GraqlParser.ROLE) | (1 << GraqlParser.RULE))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GraqlParser.COUNT - 51)) | (1 << (GraqlParser.MAX - 51)) | (1 << (GraqlParser.MIN - 51)) | (1 << (GraqlParser.MEAN - 51)) | (1 << (GraqlParser.MEDIAN - 51)) | (1 << (GraqlParser.STD - 51)) | (1 << (GraqlParser.SUM - 51)) | (1 << (GraqlParser.CLUSTER - 51)) | (1 << (GraqlParser.PATH - 51)) | (1 << (GraqlParser.DEGREE - 51)) | (1 << (GraqlParser.K_CORE - 51)) | (1 << (GraqlParser.CONNECTED_COMPONENT - 51)) | (1 << (GraqlParser.FROM - 51)) | (1 << (GraqlParser.TO - 51)) | (1 << (GraqlParser.OF - 51)) | (1 << (GraqlParser.IN - 51)) | (1 << (GraqlParser.WHERE - 51)) | (1 << (GraqlParser.MIN_K - 51)) | (1 << (GraqlParser.K - 51)) | (1 << (GraqlParser.SIZE - 51)) | (1 << (GraqlParser.CONTAINS - 51)) | (1 << (GraqlParser.NOT - 51)) | (1 << (GraqlParser.LIKE - 51)) | (1 << (GraqlParser.EQV - 51)) | (1 << (GraqlParser.NEQV - 51)) | (1 << (GraqlParser.GT - 51)) | (1 << (GraqlParser.GTE - 51)) | (1 << (GraqlParser.LT - 51)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (GraqlParser.LTE - 83)) | (1 << (GraqlParser.BOOLEAN_ - 83)) | (1 << (GraqlParser.STRING_ - 83)) | (1 << (GraqlParser.INTEGER_ - 83)) | (1 << (GraqlParser.REAL_ - 83)) | (1 << (GraqlParser.DATE_ - 83)) | (1 << (GraqlParser.DATETIME_ - 83)) | (1 << (GraqlParser.VAR_ - 83)) | (1 << (GraqlParser.ID_ - 83)) | (1 << (GraqlParser.TYPE_IMPLICIT_ - 83)) | (1 << (GraqlParser.TYPE_NAME_ - 83)))) !== 0));
        this.state = 221;
        this.match(GraqlParser.DELETE);
        this.state = 222;
        this.variables();
        this.state = 223;
        this.filters();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Query_getContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_query_get;
    return this;
}

Query_getContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_getContext.prototype.constructor = Query_getContext;

Query_getContext.prototype.MATCH = function() {
    return this.getToken(GraqlParser.MATCH, 0);
};

Query_getContext.prototype.GET = function() {
    return this.getToken(GraqlParser.GET, 0);
};

Query_getContext.prototype.variables = function() {
    return this.getTypedRuleContext(VariablesContext,0);
};

Query_getContext.prototype.filters = function() {
    return this.getTypedRuleContext(FiltersContext,0);
};

Query_getContext.prototype.pattern = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternContext);
    } else {
        return this.getTypedRuleContext(PatternContext,i);
    }
};

Query_getContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterQuery_get(this);
	}
};

Query_getContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitQuery_get(this);
	}
};

Query_getContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitQuery_get(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Query_getContext = Query_getContext;

GraqlParser.prototype.query_get = function() {

    var localctx = new Query_getContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, GraqlParser.RULE_query_get);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 225;
        this.match(GraqlParser.MATCH);
        this.state = 227; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 226;
            this.pattern();
            this.state = 229; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GraqlParser.T__2) | (1 << GraqlParser.T__4) | (1 << GraqlParser.THING) | (1 << GraqlParser.ENTITY) | (1 << GraqlParser.ATTRIBUTE) | (1 << GraqlParser.RELATION) | (1 << GraqlParser.ROLE) | (1 << GraqlParser.RULE))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GraqlParser.COUNT - 51)) | (1 << (GraqlParser.MAX - 51)) | (1 << (GraqlParser.MIN - 51)) | (1 << (GraqlParser.MEAN - 51)) | (1 << (GraqlParser.MEDIAN - 51)) | (1 << (GraqlParser.STD - 51)) | (1 << (GraqlParser.SUM - 51)) | (1 << (GraqlParser.CLUSTER - 51)) | (1 << (GraqlParser.PATH - 51)) | (1 << (GraqlParser.DEGREE - 51)) | (1 << (GraqlParser.K_CORE - 51)) | (1 << (GraqlParser.CONNECTED_COMPONENT - 51)) | (1 << (GraqlParser.FROM - 51)) | (1 << (GraqlParser.TO - 51)) | (1 << (GraqlParser.OF - 51)) | (1 << (GraqlParser.IN - 51)) | (1 << (GraqlParser.WHERE - 51)) | (1 << (GraqlParser.MIN_K - 51)) | (1 << (GraqlParser.K - 51)) | (1 << (GraqlParser.SIZE - 51)) | (1 << (GraqlParser.CONTAINS - 51)) | (1 << (GraqlParser.NOT - 51)) | (1 << (GraqlParser.LIKE - 51)) | (1 << (GraqlParser.EQV - 51)) | (1 << (GraqlParser.NEQV - 51)) | (1 << (GraqlParser.GT - 51)) | (1 << (GraqlParser.GTE - 51)) | (1 << (GraqlParser.LT - 51)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (GraqlParser.LTE - 83)) | (1 << (GraqlParser.BOOLEAN_ - 83)) | (1 << (GraqlParser.STRING_ - 83)) | (1 << (GraqlParser.INTEGER_ - 83)) | (1 << (GraqlParser.REAL_ - 83)) | (1 << (GraqlParser.DATE_ - 83)) | (1 << (GraqlParser.DATETIME_ - 83)) | (1 << (GraqlParser.VAR_ - 83)) | (1 << (GraqlParser.ID_ - 83)) | (1 << (GraqlParser.TYPE_IMPLICIT_ - 83)) | (1 << (GraqlParser.TYPE_NAME_ - 83)))) !== 0));
        this.state = 231;
        this.match(GraqlParser.GET);
        this.state = 232;
        this.variables();
        this.state = 233;
        this.filters();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Query_computeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_query_compute;
    return this;
}

Query_computeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_computeContext.prototype.constructor = Query_computeContext;

Query_computeContext.prototype.COMPUTE = function() {
    return this.getToken(GraqlParser.COMPUTE, 0);
};

Query_computeContext.prototype.compute_conditions = function() {
    return this.getTypedRuleContext(Compute_conditionsContext,0);
};

Query_computeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterQuery_compute(this);
	}
};

Query_computeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitQuery_compute(this);
	}
};

Query_computeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitQuery_compute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Query_computeContext = Query_computeContext;

GraqlParser.prototype.query_compute = function() {

    var localctx = new Query_computeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, GraqlParser.RULE_query_compute);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 235;
        this.match(GraqlParser.COMPUTE);
        this.state = 236;
        this.compute_conditions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Query_get_aggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_query_get_aggregate;
    return this;
}

Query_get_aggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_get_aggregateContext.prototype.constructor = Query_get_aggregateContext;

Query_get_aggregateContext.prototype.query_get = function() {
    return this.getTypedRuleContext(Query_getContext,0);
};

Query_get_aggregateContext.prototype.function_aggregate = function() {
    return this.getTypedRuleContext(Function_aggregateContext,0);
};

Query_get_aggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterQuery_get_aggregate(this);
	}
};

Query_get_aggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitQuery_get_aggregate(this);
	}
};

Query_get_aggregateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitQuery_get_aggregate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Query_get_aggregateContext = Query_get_aggregateContext;

GraqlParser.prototype.query_get_aggregate = function() {

    var localctx = new Query_get_aggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, GraqlParser.RULE_query_get_aggregate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 238;
        this.query_get();
        this.state = 239;
        this.function_aggregate();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Query_get_groupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_query_get_group;
    return this;
}

Query_get_groupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_get_groupContext.prototype.constructor = Query_get_groupContext;

Query_get_groupContext.prototype.query_get = function() {
    return this.getTypedRuleContext(Query_getContext,0);
};

Query_get_groupContext.prototype.function_group = function() {
    return this.getTypedRuleContext(Function_groupContext,0);
};

Query_get_groupContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterQuery_get_group(this);
	}
};

Query_get_groupContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitQuery_get_group(this);
	}
};

Query_get_groupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitQuery_get_group(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Query_get_groupContext = Query_get_groupContext;

GraqlParser.prototype.query_get_group = function() {

    var localctx = new Query_get_groupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, GraqlParser.RULE_query_get_group);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 241;
        this.query_get();
        this.state = 242;
        this.function_group();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Query_get_group_aggContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_query_get_group_agg;
    return this;
}

Query_get_group_aggContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_get_group_aggContext.prototype.constructor = Query_get_group_aggContext;

Query_get_group_aggContext.prototype.query_get = function() {
    return this.getTypedRuleContext(Query_getContext,0);
};

Query_get_group_aggContext.prototype.function_group = function() {
    return this.getTypedRuleContext(Function_groupContext,0);
};

Query_get_group_aggContext.prototype.function_aggregate = function() {
    return this.getTypedRuleContext(Function_aggregateContext,0);
};

Query_get_group_aggContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterQuery_get_group_agg(this);
	}
};

Query_get_group_aggContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitQuery_get_group_agg(this);
	}
};

Query_get_group_aggContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitQuery_get_group_agg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Query_get_group_aggContext = Query_get_group_aggContext;

GraqlParser.prototype.query_get_group_agg = function() {

    var localctx = new Query_get_group_aggContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, GraqlParser.RULE_query_get_group_agg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 244;
        this.query_get();
        this.state = 245;
        this.function_group();
        this.state = 246;
        this.function_aggregate();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_variables;
    return this;
}

VariablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariablesContext.prototype.constructor = VariablesContext;

VariablesContext.prototype.VAR_ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GraqlParser.VAR_);
    } else {
        return this.getToken(GraqlParser.VAR_, i);
    }
};


VariablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterVariables(this);
	}
};

VariablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitVariables(this);
	}
};

VariablesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitVariables(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.VariablesContext = VariablesContext;

GraqlParser.prototype.variables = function() {

    var localctx = new VariablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, GraqlParser.RULE_variables);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 256;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GraqlParser.VAR_) {
            this.state = 248;
            this.match(GraqlParser.VAR_);
            this.state = 253;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===GraqlParser.T__0) {
                this.state = 249;
                this.match(GraqlParser.T__0);
                this.state = 250;
                this.match(GraqlParser.VAR_);
                this.state = 255;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 258;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FiltersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_filters;
    return this;
}

FiltersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FiltersContext.prototype.constructor = FiltersContext;

FiltersContext.prototype.sort = function() {
    return this.getTypedRuleContext(SortContext,0);
};

FiltersContext.prototype.offset = function() {
    return this.getTypedRuleContext(OffsetContext,0);
};

FiltersContext.prototype.limit = function() {
    return this.getTypedRuleContext(LimitContext,0);
};

FiltersContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterFilters(this);
	}
};

FiltersContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitFilters(this);
	}
};

FiltersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitFilters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.FiltersContext = FiltersContext;

GraqlParser.prototype.filters = function() {

    var localctx = new FiltersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, GraqlParser.RULE_filters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 261;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GraqlParser.SORT) {
            this.state = 260;
            this.sort();
        }

        this.state = 264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GraqlParser.OFFSET) {
            this.state = 263;
            this.offset();
        }

        this.state = 267;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GraqlParser.LIMIT) {
            this.state = 266;
            this.limit();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_sort;
    return this;
}

SortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortContext.prototype.constructor = SortContext;

SortContext.prototype.SORT = function() {
    return this.getToken(GraqlParser.SORT, 0);
};

SortContext.prototype.VAR_ = function() {
    return this.getToken(GraqlParser.VAR_, 0);
};

SortContext.prototype.ORDER_ = function() {
    return this.getToken(GraqlParser.ORDER_, 0);
};

SortContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterSort(this);
	}
};

SortContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitSort(this);
	}
};

SortContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitSort(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.SortContext = SortContext;

GraqlParser.prototype.sort = function() {

    var localctx = new SortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, GraqlParser.RULE_sort);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 269;
        this.match(GraqlParser.SORT);
        this.state = 270;
        this.match(GraqlParser.VAR_);
        this.state = 272;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GraqlParser.ORDER_) {
            this.state = 271;
            this.match(GraqlParser.ORDER_);
        }

        this.state = 274;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OffsetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_offset;
    return this;
}

OffsetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OffsetContext.prototype.constructor = OffsetContext;

OffsetContext.prototype.OFFSET = function() {
    return this.getToken(GraqlParser.OFFSET, 0);
};

OffsetContext.prototype.INTEGER_ = function() {
    return this.getToken(GraqlParser.INTEGER_, 0);
};

OffsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterOffset(this);
	}
};

OffsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitOffset(this);
	}
};

OffsetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitOffset(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.OffsetContext = OffsetContext;

GraqlParser.prototype.offset = function() {

    var localctx = new OffsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, GraqlParser.RULE_offset);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 276;
        this.match(GraqlParser.OFFSET);
        this.state = 277;
        this.match(GraqlParser.INTEGER_);
        this.state = 278;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_limit;
    return this;
}

LimitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitContext.prototype.constructor = LimitContext;

LimitContext.prototype.LIMIT = function() {
    return this.getToken(GraqlParser.LIMIT, 0);
};

LimitContext.prototype.INTEGER_ = function() {
    return this.getToken(GraqlParser.INTEGER_, 0);
};

LimitContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterLimit(this);
	}
};

LimitContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitLimit(this);
	}
};

LimitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitLimit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.LimitContext = LimitContext;

GraqlParser.prototype.limit = function() {

    var localctx = new LimitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, GraqlParser.RULE_limit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 280;
        this.match(GraqlParser.LIMIT);
        this.state = 281;
        this.match(GraqlParser.INTEGER_);
        this.state = 282;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_aggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_function_aggregate;
    return this;
}

Function_aggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_aggregateContext.prototype.constructor = Function_aggregateContext;

Function_aggregateContext.prototype.function_method = function() {
    return this.getTypedRuleContext(Function_methodContext,0);
};

Function_aggregateContext.prototype.VAR_ = function() {
    return this.getToken(GraqlParser.VAR_, 0);
};

Function_aggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterFunction_aggregate(this);
	}
};

Function_aggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitFunction_aggregate(this);
	}
};

Function_aggregateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitFunction_aggregate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Function_aggregateContext = Function_aggregateContext;

GraqlParser.prototype.function_aggregate = function() {

    var localctx = new Function_aggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, GraqlParser.RULE_function_aggregate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.function_method();
        this.state = 286;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GraqlParser.VAR_) {
            this.state = 285;
            this.match(GraqlParser.VAR_);
        }

        this.state = 288;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_methodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_function_method;
    return this;
}

Function_methodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_methodContext.prototype.constructor = Function_methodContext;

Function_methodContext.prototype.COUNT = function() {
    return this.getToken(GraqlParser.COUNT, 0);
};

Function_methodContext.prototype.MAX = function() {
    return this.getToken(GraqlParser.MAX, 0);
};

Function_methodContext.prototype.MEAN = function() {
    return this.getToken(GraqlParser.MEAN, 0);
};

Function_methodContext.prototype.MEDIAN = function() {
    return this.getToken(GraqlParser.MEDIAN, 0);
};

Function_methodContext.prototype.MIN = function() {
    return this.getToken(GraqlParser.MIN, 0);
};

Function_methodContext.prototype.STD = function() {
    return this.getToken(GraqlParser.STD, 0);
};

Function_methodContext.prototype.SUM = function() {
    return this.getToken(GraqlParser.SUM, 0);
};

Function_methodContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterFunction_method(this);
	}
};

Function_methodContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitFunction_method(this);
	}
};

Function_methodContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitFunction_method(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Function_methodContext = Function_methodContext;

GraqlParser.prototype.function_method = function() {

    var localctx = new Function_methodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, GraqlParser.RULE_function_method);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 290;
        _la = this._input.LA(1);
        if(!(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GraqlParser.COUNT - 51)) | (1 << (GraqlParser.MAX - 51)) | (1 << (GraqlParser.MIN - 51)) | (1 << (GraqlParser.MEAN - 51)) | (1 << (GraqlParser.MEDIAN - 51)) | (1 << (GraqlParser.STD - 51)) | (1 << (GraqlParser.SUM - 51)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_groupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_function_group;
    return this;
}

Function_groupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_groupContext.prototype.constructor = Function_groupContext;

Function_groupContext.prototype.GROUP = function() {
    return this.getToken(GraqlParser.GROUP, 0);
};

Function_groupContext.prototype.VAR_ = function() {
    return this.getToken(GraqlParser.VAR_, 0);
};

Function_groupContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterFunction_group(this);
	}
};

Function_groupContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitFunction_group(this);
	}
};

Function_groupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitFunction_group(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Function_groupContext = Function_groupContext;

GraqlParser.prototype.function_group = function() {

    var localctx = new Function_groupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, GraqlParser.RULE_function_group);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 292;
        this.match(GraqlParser.GROUP);
        this.state = 293;
        this.match(GraqlParser.VAR_);
        this.state = 294;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PatternsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_patterns;
    return this;
}

PatternsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternsContext.prototype.constructor = PatternsContext;

PatternsContext.prototype.pattern = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternContext);
    } else {
        return this.getTypedRuleContext(PatternContext,i);
    }
};

PatternsContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterPatterns(this);
	}
};

PatternsContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitPatterns(this);
	}
};

PatternsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitPatterns(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.PatternsContext = PatternsContext;

GraqlParser.prototype.patterns = function() {

    var localctx = new PatternsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, GraqlParser.RULE_patterns);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 297; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 296;
            this.pattern();
            this.state = 299; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GraqlParser.T__2) | (1 << GraqlParser.T__4) | (1 << GraqlParser.THING) | (1 << GraqlParser.ENTITY) | (1 << GraqlParser.ATTRIBUTE) | (1 << GraqlParser.RELATION) | (1 << GraqlParser.ROLE) | (1 << GraqlParser.RULE))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GraqlParser.COUNT - 51)) | (1 << (GraqlParser.MAX - 51)) | (1 << (GraqlParser.MIN - 51)) | (1 << (GraqlParser.MEAN - 51)) | (1 << (GraqlParser.MEDIAN - 51)) | (1 << (GraqlParser.STD - 51)) | (1 << (GraqlParser.SUM - 51)) | (1 << (GraqlParser.CLUSTER - 51)) | (1 << (GraqlParser.PATH - 51)) | (1 << (GraqlParser.DEGREE - 51)) | (1 << (GraqlParser.K_CORE - 51)) | (1 << (GraqlParser.CONNECTED_COMPONENT - 51)) | (1 << (GraqlParser.FROM - 51)) | (1 << (GraqlParser.TO - 51)) | (1 << (GraqlParser.OF - 51)) | (1 << (GraqlParser.IN - 51)) | (1 << (GraqlParser.WHERE - 51)) | (1 << (GraqlParser.MIN_K - 51)) | (1 << (GraqlParser.K - 51)) | (1 << (GraqlParser.SIZE - 51)) | (1 << (GraqlParser.CONTAINS - 51)) | (1 << (GraqlParser.NOT - 51)) | (1 << (GraqlParser.LIKE - 51)) | (1 << (GraqlParser.EQV - 51)) | (1 << (GraqlParser.NEQV - 51)) | (1 << (GraqlParser.GT - 51)) | (1 << (GraqlParser.GTE - 51)) | (1 << (GraqlParser.LT - 51)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (GraqlParser.LTE - 83)) | (1 << (GraqlParser.BOOLEAN_ - 83)) | (1 << (GraqlParser.STRING_ - 83)) | (1 << (GraqlParser.INTEGER_ - 83)) | (1 << (GraqlParser.REAL_ - 83)) | (1 << (GraqlParser.DATE_ - 83)) | (1 << (GraqlParser.DATETIME_ - 83)) | (1 << (GraqlParser.VAR_ - 83)) | (1 << (GraqlParser.ID_ - 83)) | (1 << (GraqlParser.TYPE_IMPLICIT_ - 83)) | (1 << (GraqlParser.TYPE_NAME_ - 83)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_pattern;
    return this;
}

PatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternContext.prototype.constructor = PatternContext;

PatternContext.prototype.pattern_statement = function() {
    return this.getTypedRuleContext(Pattern_statementContext,0);
};

PatternContext.prototype.pattern_conjunction = function() {
    return this.getTypedRuleContext(Pattern_conjunctionContext,0);
};

PatternContext.prototype.pattern_disjunction = function() {
    return this.getTypedRuleContext(Pattern_disjunctionContext,0);
};

PatternContext.prototype.pattern_negation = function() {
    return this.getTypedRuleContext(Pattern_negationContext,0);
};

PatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterPattern(this);
	}
};

PatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitPattern(this);
	}
};

PatternContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitPattern(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.PatternContext = PatternContext;

GraqlParser.prototype.pattern = function() {

    var localctx = new PatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, GraqlParser.RULE_pattern);
    try {
        this.state = 305;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 301;
            this.pattern_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 302;
            this.pattern_conjunction();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 303;
            this.pattern_disjunction();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 304;
            this.pattern_negation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pattern_conjunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_pattern_conjunction;
    return this;
}

Pattern_conjunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pattern_conjunctionContext.prototype.constructor = Pattern_conjunctionContext;

Pattern_conjunctionContext.prototype.patterns = function() {
    return this.getTypedRuleContext(PatternsContext,0);
};

Pattern_conjunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterPattern_conjunction(this);
	}
};

Pattern_conjunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitPattern_conjunction(this);
	}
};

Pattern_conjunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitPattern_conjunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Pattern_conjunctionContext = Pattern_conjunctionContext;

GraqlParser.prototype.pattern_conjunction = function() {

    var localctx = new Pattern_conjunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, GraqlParser.RULE_pattern_conjunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 307;
        this.match(GraqlParser.T__2);
        this.state = 308;
        this.patterns();
        this.state = 309;
        this.match(GraqlParser.T__3);
        this.state = 310;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pattern_disjunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_pattern_disjunction;
    return this;
}

Pattern_disjunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pattern_disjunctionContext.prototype.constructor = Pattern_disjunctionContext;

Pattern_disjunctionContext.prototype.patterns = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternsContext);
    } else {
        return this.getTypedRuleContext(PatternsContext,i);
    }
};

Pattern_disjunctionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GraqlParser.OR);
    } else {
        return this.getToken(GraqlParser.OR, i);
    }
};


Pattern_disjunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterPattern_disjunction(this);
	}
};

Pattern_disjunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitPattern_disjunction(this);
	}
};

Pattern_disjunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitPattern_disjunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Pattern_disjunctionContext = Pattern_disjunctionContext;

GraqlParser.prototype.pattern_disjunction = function() {

    var localctx = new Pattern_disjunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, GraqlParser.RULE_pattern_disjunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 312;
        this.match(GraqlParser.T__2);
        this.state = 313;
        this.patterns();
        this.state = 314;
        this.match(GraqlParser.T__3);
        this.state = 320; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 315;
            this.match(GraqlParser.OR);
            this.state = 316;
            this.match(GraqlParser.T__2);
            this.state = 317;
            this.patterns();
            this.state = 318;
            this.match(GraqlParser.T__3);
            this.state = 322; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===GraqlParser.OR);
        this.state = 324;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pattern_negationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_pattern_negation;
    return this;
}

Pattern_negationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pattern_negationContext.prototype.constructor = Pattern_negationContext;

Pattern_negationContext.prototype.NOT = function() {
    return this.getToken(GraqlParser.NOT, 0);
};

Pattern_negationContext.prototype.patterns = function() {
    return this.getTypedRuleContext(PatternsContext,0);
};

Pattern_negationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterPattern_negation(this);
	}
};

Pattern_negationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitPattern_negation(this);
	}
};

Pattern_negationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitPattern_negation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Pattern_negationContext = Pattern_negationContext;

GraqlParser.prototype.pattern_negation = function() {

    var localctx = new Pattern_negationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, GraqlParser.RULE_pattern_negation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this.match(GraqlParser.NOT);
        this.state = 327;
        this.match(GraqlParser.T__2);
        this.state = 328;
        this.patterns();
        this.state = 329;
        this.match(GraqlParser.T__3);
        this.state = 330;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pattern_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_pattern_statement;
    return this;
}

Pattern_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pattern_statementContext.prototype.constructor = Pattern_statementContext;

Pattern_statementContext.prototype.statement_type = function() {
    return this.getTypedRuleContext(Statement_typeContext,0);
};

Pattern_statementContext.prototype.statement_instance = function() {
    return this.getTypedRuleContext(Statement_instanceContext,0);
};

Pattern_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterPattern_statement(this);
	}
};

Pattern_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitPattern_statement(this);
	}
};

Pattern_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitPattern_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Pattern_statementContext = Pattern_statementContext;

GraqlParser.prototype.pattern_statement = function() {

    var localctx = new Pattern_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, GraqlParser.RULE_pattern_statement);
    try {
        this.state = 334;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 332;
            this.statement_type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 333;
            this.statement_instance();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Statement_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_statement_type;
    return this;
}

Statement_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_typeContext.prototype.constructor = Statement_typeContext;

Statement_typeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Statement_typeContext.prototype.type_property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_propertyContext);
    } else {
        return this.getTypedRuleContext(Type_propertyContext,i);
    }
};

Statement_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterStatement_type(this);
	}
};

Statement_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitStatement_type(this);
	}
};

Statement_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitStatement_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Statement_typeContext = Statement_typeContext;

GraqlParser.prototype.statement_type = function() {

    var localctx = new Statement_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, GraqlParser.RULE_statement_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this.type();
        this.state = 337;
        this.type_property();
        this.state = 342;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GraqlParser.T__0) {
            this.state = 338;
            this.match(GraqlParser.T__0);
            this.state = 339;
            this.type_property();
            this.state = 344;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 345;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_propertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_type_property;
    return this;
}

Type_propertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_propertyContext.prototype.constructor = Type_propertyContext;

Type_propertyContext.prototype.ABSTRACT = function() {
    return this.getToken(GraqlParser.ABSTRACT, 0);
};

Type_propertyContext.prototype.SUB_ = function() {
    return this.getToken(GraqlParser.SUB_, 0);
};

Type_propertyContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

Type_propertyContext.prototype.KEY = function() {
    return this.getToken(GraqlParser.KEY, 0);
};

Type_propertyContext.prototype.HAS = function() {
    return this.getToken(GraqlParser.HAS, 0);
};

Type_propertyContext.prototype.PLAYS = function() {
    return this.getToken(GraqlParser.PLAYS, 0);
};

Type_propertyContext.prototype.RELATES = function() {
    return this.getToken(GraqlParser.RELATES, 0);
};

Type_propertyContext.prototype.AS = function() {
    return this.getToken(GraqlParser.AS, 0);
};

Type_propertyContext.prototype.DATATYPE = function() {
    return this.getToken(GraqlParser.DATATYPE, 0);
};

Type_propertyContext.prototype.datatype = function() {
    return this.getTypedRuleContext(DatatypeContext,0);
};

Type_propertyContext.prototype.REGEX = function() {
    return this.getToken(GraqlParser.REGEX, 0);
};

Type_propertyContext.prototype.regex = function() {
    return this.getTypedRuleContext(RegexContext,0);
};

Type_propertyContext.prototype.WHEN = function() {
    return this.getToken(GraqlParser.WHEN, 0);
};

Type_propertyContext.prototype.pattern = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternContext);
    } else {
        return this.getTypedRuleContext(PatternContext,i);
    }
};

Type_propertyContext.prototype.THEN = function() {
    return this.getToken(GraqlParser.THEN, 0);
};

Type_propertyContext.prototype.statement_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_instanceContext);
    } else {
        return this.getTypedRuleContext(Statement_instanceContext,i);
    }
};

Type_propertyContext.prototype.TYPE = function() {
    return this.getToken(GraqlParser.TYPE, 0);
};

Type_propertyContext.prototype.type_label = function() {
    return this.getTypedRuleContext(Type_labelContext,0);
};

Type_propertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterType_property(this);
	}
};

Type_propertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitType_property(this);
	}
};

Type_propertyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitType_property(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Type_propertyContext = Type_propertyContext;

GraqlParser.prototype.type_property = function() {

    var localctx = new Type_propertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, GraqlParser.RULE_type_property);
    var _la = 0; // Token type
    try {
        this.state = 386;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.ABSTRACT:
            this.enterOuterAlt(localctx, 1);
            this.state = 347;
            this.match(GraqlParser.ABSTRACT);
            break;
        case GraqlParser.SUB_:
            this.enterOuterAlt(localctx, 2);
            this.state = 348;
            this.match(GraqlParser.SUB_);
            this.state = 349;
            this.type();
            break;
        case GraqlParser.KEY:
            this.enterOuterAlt(localctx, 3);
            this.state = 350;
            this.match(GraqlParser.KEY);
            this.state = 351;
            this.type();
            break;
        case GraqlParser.HAS:
            this.enterOuterAlt(localctx, 4);
            this.state = 352;
            this.match(GraqlParser.HAS);
            this.state = 353;
            this.type();
            break;
        case GraqlParser.PLAYS:
            this.enterOuterAlt(localctx, 5);
            this.state = 354;
            this.match(GraqlParser.PLAYS);
            this.state = 355;
            this.type();
            break;
        case GraqlParser.RELATES:
            this.enterOuterAlt(localctx, 6);
            this.state = 356;
            this.match(GraqlParser.RELATES);
            this.state = 357;
            this.type();
            this.state = 360;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GraqlParser.AS) {
                this.state = 358;
                this.match(GraqlParser.AS);
                this.state = 359;
                this.type();
            }

            break;
        case GraqlParser.DATATYPE:
            this.enterOuterAlt(localctx, 7);
            this.state = 362;
            this.match(GraqlParser.DATATYPE);
            this.state = 363;
            this.datatype();
            break;
        case GraqlParser.REGEX:
            this.enterOuterAlt(localctx, 8);
            this.state = 364;
            this.match(GraqlParser.REGEX);
            this.state = 365;
            this.regex();
            break;
        case GraqlParser.WHEN:
            this.enterOuterAlt(localctx, 9);
            this.state = 366;
            this.match(GraqlParser.WHEN);
            this.state = 367;
            this.match(GraqlParser.T__2);
            this.state = 369; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 368;
                this.pattern();
                this.state = 371; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GraqlParser.T__2) | (1 << GraqlParser.T__4) | (1 << GraqlParser.THING) | (1 << GraqlParser.ENTITY) | (1 << GraqlParser.ATTRIBUTE) | (1 << GraqlParser.RELATION) | (1 << GraqlParser.ROLE) | (1 << GraqlParser.RULE))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GraqlParser.COUNT - 51)) | (1 << (GraqlParser.MAX - 51)) | (1 << (GraqlParser.MIN - 51)) | (1 << (GraqlParser.MEAN - 51)) | (1 << (GraqlParser.MEDIAN - 51)) | (1 << (GraqlParser.STD - 51)) | (1 << (GraqlParser.SUM - 51)) | (1 << (GraqlParser.CLUSTER - 51)) | (1 << (GraqlParser.PATH - 51)) | (1 << (GraqlParser.DEGREE - 51)) | (1 << (GraqlParser.K_CORE - 51)) | (1 << (GraqlParser.CONNECTED_COMPONENT - 51)) | (1 << (GraqlParser.FROM - 51)) | (1 << (GraqlParser.TO - 51)) | (1 << (GraqlParser.OF - 51)) | (1 << (GraqlParser.IN - 51)) | (1 << (GraqlParser.WHERE - 51)) | (1 << (GraqlParser.MIN_K - 51)) | (1 << (GraqlParser.K - 51)) | (1 << (GraqlParser.SIZE - 51)) | (1 << (GraqlParser.CONTAINS - 51)) | (1 << (GraqlParser.NOT - 51)) | (1 << (GraqlParser.LIKE - 51)) | (1 << (GraqlParser.EQV - 51)) | (1 << (GraqlParser.NEQV - 51)) | (1 << (GraqlParser.GT - 51)) | (1 << (GraqlParser.GTE - 51)) | (1 << (GraqlParser.LT - 51)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (GraqlParser.LTE - 83)) | (1 << (GraqlParser.BOOLEAN_ - 83)) | (1 << (GraqlParser.STRING_ - 83)) | (1 << (GraqlParser.INTEGER_ - 83)) | (1 << (GraqlParser.REAL_ - 83)) | (1 << (GraqlParser.DATE_ - 83)) | (1 << (GraqlParser.DATETIME_ - 83)) | (1 << (GraqlParser.VAR_ - 83)) | (1 << (GraqlParser.ID_ - 83)) | (1 << (GraqlParser.TYPE_IMPLICIT_ - 83)) | (1 << (GraqlParser.TYPE_NAME_ - 83)))) !== 0));
            this.state = 373;
            this.match(GraqlParser.T__3);
            break;
        case GraqlParser.THEN:
            this.enterOuterAlt(localctx, 10);
            this.state = 375;
            this.match(GraqlParser.THEN);
            this.state = 376;
            this.match(GraqlParser.T__2);
            this.state = 378; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 377;
                this.statement_instance();
                this.state = 380; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===GraqlParser.T__4 || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (GraqlParser.CONTAINS - 73)) | (1 << (GraqlParser.LIKE - 73)) | (1 << (GraqlParser.EQV - 73)) | (1 << (GraqlParser.NEQV - 73)) | (1 << (GraqlParser.GT - 73)) | (1 << (GraqlParser.GTE - 73)) | (1 << (GraqlParser.LT - 73)) | (1 << (GraqlParser.LTE - 73)) | (1 << (GraqlParser.BOOLEAN_ - 73)) | (1 << (GraqlParser.STRING_ - 73)) | (1 << (GraqlParser.INTEGER_ - 73)) | (1 << (GraqlParser.REAL_ - 73)) | (1 << (GraqlParser.DATE_ - 73)) | (1 << (GraqlParser.DATETIME_ - 73)) | (1 << (GraqlParser.VAR_ - 73)))) !== 0));
            this.state = 382;
            this.match(GraqlParser.T__3);
            break;
        case GraqlParser.TYPE:
            this.enterOuterAlt(localctx, 11);
            this.state = 384;
            this.match(GraqlParser.TYPE);
            this.state = 385;
            this.type_label();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Statement_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_statement_instance;
    return this;
}

Statement_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_instanceContext.prototype.constructor = Statement_instanceContext;

Statement_instanceContext.prototype.statement_thing = function() {
    return this.getTypedRuleContext(Statement_thingContext,0);
};

Statement_instanceContext.prototype.statement_relation = function() {
    return this.getTypedRuleContext(Statement_relationContext,0);
};

Statement_instanceContext.prototype.statement_attribute = function() {
    return this.getTypedRuleContext(Statement_attributeContext,0);
};

Statement_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterStatement_instance(this);
	}
};

Statement_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitStatement_instance(this);
	}
};

Statement_instanceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitStatement_instance(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Statement_instanceContext = Statement_instanceContext;

GraqlParser.prototype.statement_instance = function() {

    var localctx = new Statement_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, GraqlParser.RULE_statement_instance);
    try {
        this.state = 391;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 388;
            this.statement_thing();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 389;
            this.statement_relation();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 390;
            this.statement_attribute();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Statement_thingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_statement_thing;
    return this;
}

Statement_thingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_thingContext.prototype.constructor = Statement_thingContext;

Statement_thingContext.prototype.VAR_ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GraqlParser.VAR_);
    } else {
        return this.getToken(GraqlParser.VAR_, i);
    }
};


Statement_thingContext.prototype.ISA_ = function() {
    return this.getToken(GraqlParser.ISA_, 0);
};

Statement_thingContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Statement_thingContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Statement_thingContext.prototype.ID = function() {
    return this.getToken(GraqlParser.ID, 0);
};

Statement_thingContext.prototype.ID_ = function() {
    return this.getToken(GraqlParser.ID_, 0);
};

Statement_thingContext.prototype.NEQ = function() {
    return this.getToken(GraqlParser.NEQ, 0);
};

Statement_thingContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterStatement_thing(this);
	}
};

Statement_thingContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitStatement_thing(this);
	}
};

Statement_thingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitStatement_thing(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Statement_thingContext = Statement_thingContext;

GraqlParser.prototype.statement_thing = function() {

    var localctx = new Statement_thingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, GraqlParser.RULE_statement_thing);
    var _la = 0; // Token type
    try {
        this.state = 418;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 393;
            this.match(GraqlParser.VAR_);
            this.state = 394;
            this.match(GraqlParser.ISA_);
            this.state = 395;
            this.type();
            this.state = 398;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GraqlParser.T__0) {
                this.state = 396;
                this.match(GraqlParser.T__0);
                this.state = 397;
                this.attributes();
            }

            this.state = 400;
            this.match(GraqlParser.T__1);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 402;
            this.match(GraqlParser.VAR_);
            this.state = 403;
            this.match(GraqlParser.ID);
            this.state = 404;
            this.match(GraqlParser.ID_);
            this.state = 407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GraqlParser.T__0) {
                this.state = 405;
                this.match(GraqlParser.T__0);
                this.state = 406;
                this.attributes();
            }

            this.state = 409;
            this.match(GraqlParser.T__1);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 410;
            this.match(GraqlParser.VAR_);
            this.state = 411;
            this.match(GraqlParser.NEQ);
            this.state = 412;
            this.match(GraqlParser.VAR_);
            this.state = 413;
            this.match(GraqlParser.T__1);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 414;
            this.match(GraqlParser.VAR_);
            this.state = 415;
            this.attributes();
            this.state = 416;
            this.match(GraqlParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Statement_relationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_statement_relation;
    return this;
}

Statement_relationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_relationContext.prototype.constructor = Statement_relationContext;

Statement_relationContext.prototype.relation = function() {
    return this.getTypedRuleContext(RelationContext,0);
};

Statement_relationContext.prototype.ISA_ = function() {
    return this.getToken(GraqlParser.ISA_, 0);
};

Statement_relationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Statement_relationContext.prototype.VAR_ = function() {
    return this.getToken(GraqlParser.VAR_, 0);
};

Statement_relationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Statement_relationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterStatement_relation(this);
	}
};

Statement_relationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitStatement_relation(this);
	}
};

Statement_relationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitStatement_relation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Statement_relationContext = Statement_relationContext;

GraqlParser.prototype.statement_relation = function() {

    var localctx = new Statement_relationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, GraqlParser.RULE_statement_relation);
    var _la = 0; // Token type
    try {
        this.state = 445;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 421;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GraqlParser.VAR_) {
                this.state = 420;
                this.match(GraqlParser.VAR_);
            }

            this.state = 423;
            this.relation();
            this.state = 424;
            this.match(GraqlParser.ISA_);
            this.state = 425;
            this.type();
            this.state = 428;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GraqlParser.T__0) {
                this.state = 426;
                this.match(GraqlParser.T__0);
                this.state = 427;
                this.attributes();
            }

            this.state = 430;
            this.match(GraqlParser.T__1);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 433;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GraqlParser.VAR_) {
                this.state = 432;
                this.match(GraqlParser.VAR_);
            }

            this.state = 435;
            this.relation();
            this.state = 436;
            this.attributes();
            this.state = 437;
            this.match(GraqlParser.T__1);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 440;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GraqlParser.VAR_) {
                this.state = 439;
                this.match(GraqlParser.VAR_);
            }

            this.state = 442;
            this.relation();
            this.state = 443;
            this.match(GraqlParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Statement_attributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_statement_attribute;
    return this;
}

Statement_attributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_attributeContext.prototype.constructor = Statement_attributeContext;

Statement_attributeContext.prototype.operation = function() {
    return this.getTypedRuleContext(OperationContext,0);
};

Statement_attributeContext.prototype.ISA_ = function() {
    return this.getToken(GraqlParser.ISA_, 0);
};

Statement_attributeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Statement_attributeContext.prototype.VAR_ = function() {
    return this.getToken(GraqlParser.VAR_, 0);
};

Statement_attributeContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Statement_attributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterStatement_attribute(this);
	}
};

Statement_attributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitStatement_attribute(this);
	}
};

Statement_attributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitStatement_attribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Statement_attributeContext = Statement_attributeContext;

GraqlParser.prototype.statement_attribute = function() {

    var localctx = new Statement_attributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, GraqlParser.RULE_statement_attribute);
    var _la = 0; // Token type
    try {
        this.state = 472;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 448;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GraqlParser.VAR_) {
                this.state = 447;
                this.match(GraqlParser.VAR_);
            }

            this.state = 450;
            this.operation();
            this.state = 451;
            this.match(GraqlParser.ISA_);
            this.state = 452;
            this.type();
            this.state = 455;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GraqlParser.T__0) {
                this.state = 453;
                this.match(GraqlParser.T__0);
                this.state = 454;
                this.attributes();
            }

            this.state = 457;
            this.match(GraqlParser.T__1);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 460;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GraqlParser.VAR_) {
                this.state = 459;
                this.match(GraqlParser.VAR_);
            }

            this.state = 462;
            this.operation();
            this.state = 463;
            this.attributes();
            this.state = 464;
            this.match(GraqlParser.T__1);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 467;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GraqlParser.VAR_) {
                this.state = 466;
                this.match(GraqlParser.VAR_);
            }

            this.state = 469;
            this.operation();
            this.state = 470;
            this.match(GraqlParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_relation;
    return this;
}

RelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationContext.prototype.constructor = RelationContext;

RelationContext.prototype.role_player = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Role_playerContext);
    } else {
        return this.getTypedRuleContext(Role_playerContext,i);
    }
};

RelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterRelation(this);
	}
};

RelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitRelation(this);
	}
};

RelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitRelation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.RelationContext = RelationContext;

GraqlParser.prototype.relation = function() {

    var localctx = new RelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, GraqlParser.RULE_relation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 474;
        this.match(GraqlParser.T__4);
        this.state = 475;
        this.role_player();
        this.state = 480;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GraqlParser.T__0) {
            this.state = 476;
            this.match(GraqlParser.T__0);
            this.state = 477;
            this.role_player();
            this.state = 482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 483;
        this.match(GraqlParser.T__5);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Role_playerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_role_player;
    return this;
}

Role_playerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Role_playerContext.prototype.constructor = Role_playerContext;

Role_playerContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Role_playerContext.prototype.player = function() {
    return this.getTypedRuleContext(PlayerContext,0);
};

Role_playerContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterRole_player(this);
	}
};

Role_playerContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitRole_player(this);
	}
};

Role_playerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitRole_player(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Role_playerContext = Role_playerContext;

GraqlParser.prototype.role_player = function() {

    var localctx = new Role_playerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, GraqlParser.RULE_role_player);
    try {
        this.state = 490;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 485;
            this.type();
            this.state = 486;
            this.match(GraqlParser.T__6);
            this.state = 487;
            this.player();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 489;
            this.player();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PlayerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_player;
    return this;
}

PlayerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlayerContext.prototype.constructor = PlayerContext;

PlayerContext.prototype.VAR_ = function() {
    return this.getToken(GraqlParser.VAR_, 0);
};

PlayerContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterPlayer(this);
	}
};

PlayerContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitPlayer(this);
	}
};

PlayerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitPlayer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.PlayerContext = PlayerContext;

GraqlParser.prototype.player = function() {

    var localctx = new PlayerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, GraqlParser.RULE_player);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 492;
        this.match(GraqlParser.VAR_);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_via;
    return this;
}

ViaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViaContext.prototype.constructor = ViaContext;

ViaContext.prototype.VIA = function() {
    return this.getToken(GraqlParser.VIA, 0);
};

ViaContext.prototype.VAR_ = function() {
    return this.getToken(GraqlParser.VAR_, 0);
};

ViaContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterVia(this);
	}
};

ViaContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitVia(this);
	}
};

ViaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitVia(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.ViaContext = ViaContext;

GraqlParser.prototype.via = function() {

    var localctx = new ViaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, GraqlParser.RULE_via);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 494;
        this.match(GraqlParser.VIA);
        this.state = 495;
        this.match(GraqlParser.VAR_);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_attributes;
    return this;
}

AttributesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributesContext.prototype.constructor = AttributesContext;

AttributesContext.prototype.attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeContext);
    } else {
        return this.getTypedRuleContext(AttributeContext,i);
    }
};

AttributesContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterAttributes(this);
	}
};

AttributesContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitAttributes(this);
	}
};

AttributesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitAttributes(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.AttributesContext = AttributesContext;

GraqlParser.prototype.attributes = function() {

    var localctx = new AttributesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, GraqlParser.RULE_attributes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 497;
        this.attribute();
        this.state = 502;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GraqlParser.T__0) {
            this.state = 498;
            this.match(GraqlParser.T__0);
            this.state = 499;
            this.attribute();
            this.state = 504;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_attribute;
    return this;
}

AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeContext.prototype.constructor = AttributeContext;

AttributeContext.prototype.HAS = function() {
    return this.getToken(GraqlParser.HAS, 0);
};

AttributeContext.prototype.type_label = function() {
    return this.getTypedRuleContext(Type_labelContext,0);
};

AttributeContext.prototype.VAR_ = function() {
    return this.getToken(GraqlParser.VAR_, 0);
};

AttributeContext.prototype.operation = function() {
    return this.getTypedRuleContext(OperationContext,0);
};

AttributeContext.prototype.via = function() {
    return this.getTypedRuleContext(ViaContext,0);
};

AttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterAttribute(this);
	}
};

AttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitAttribute(this);
	}
};

AttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitAttribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.AttributeContext = AttributeContext;

GraqlParser.prototype.attribute = function() {

    var localctx = new AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, GraqlParser.RULE_attribute);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this.match(GraqlParser.HAS);
        this.state = 506;
        this.type_label();
        this.state = 509;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.VAR_:
            this.state = 507;
            this.match(GraqlParser.VAR_);
            break;
        case GraqlParser.CONTAINS:
        case GraqlParser.LIKE:
        case GraqlParser.EQV:
        case GraqlParser.NEQV:
        case GraqlParser.GT:
        case GraqlParser.GTE:
        case GraqlParser.LT:
        case GraqlParser.LTE:
        case GraqlParser.BOOLEAN_:
        case GraqlParser.STRING_:
        case GraqlParser.INTEGER_:
        case GraqlParser.REAL_:
        case GraqlParser.DATE_:
        case GraqlParser.DATETIME_:
            this.state = 508;
            this.operation();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 512;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GraqlParser.VIA) {
            this.state = 511;
            this.via();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_operation;
    return this;
}

OperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperationContext.prototype.constructor = OperationContext;

OperationContext.prototype.assignment = function() {
    return this.getTypedRuleContext(AssignmentContext,0);
};

OperationContext.prototype.comparison = function() {
    return this.getTypedRuleContext(ComparisonContext,0);
};

OperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterOperation(this);
	}
};

OperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitOperation(this);
	}
};

OperationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitOperation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.OperationContext = OperationContext;

GraqlParser.prototype.operation = function() {

    var localctx = new OperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, GraqlParser.RULE_operation);
    try {
        this.state = 516;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.BOOLEAN_:
        case GraqlParser.STRING_:
        case GraqlParser.INTEGER_:
        case GraqlParser.REAL_:
        case GraqlParser.DATE_:
        case GraqlParser.DATETIME_:
            this.enterOuterAlt(localctx, 1);
            this.state = 514;
            this.assignment();
            break;
        case GraqlParser.CONTAINS:
        case GraqlParser.LIKE:
        case GraqlParser.EQV:
        case GraqlParser.NEQV:
        case GraqlParser.GT:
        case GraqlParser.GTE:
        case GraqlParser.LT:
        case GraqlParser.LTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 515;
            this.comparison();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_assignment;
    return this;
}

AssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AssignmentContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

AssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterAssignment(this);
	}
};

AssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitAssignment(this);
	}
};

AssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.AssignmentContext = AssignmentContext;

GraqlParser.prototype.assignment = function() {

    var localctx = new AssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, GraqlParser.RULE_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 518;
        this.literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_comparison;
    return this;
}

ComparisonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

ComparisonContext.prototype.comparator = function() {
    return this.getTypedRuleContext(ComparatorContext,0);
};

ComparisonContext.prototype.comparable = function() {
    return this.getTypedRuleContext(ComparableContext,0);
};

ComparisonContext.prototype.CONTAINS = function() {
    return this.getToken(GraqlParser.CONTAINS, 0);
};

ComparisonContext.prototype.containable = function() {
    return this.getTypedRuleContext(ContainableContext,0);
};

ComparisonContext.prototype.LIKE = function() {
    return this.getToken(GraqlParser.LIKE, 0);
};

ComparisonContext.prototype.regex = function() {
    return this.getTypedRuleContext(RegexContext,0);
};

ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitComparison(this);
	}
};

ComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitComparison(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.ComparisonContext = ComparisonContext;

GraqlParser.prototype.comparison = function() {

    var localctx = new ComparisonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, GraqlParser.RULE_comparison);
    try {
        this.state = 527;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.EQV:
        case GraqlParser.NEQV:
        case GraqlParser.GT:
        case GraqlParser.GTE:
        case GraqlParser.LT:
        case GraqlParser.LTE:
            this.enterOuterAlt(localctx, 1);
            this.state = 520;
            this.comparator();
            this.state = 521;
            this.comparable();
            break;
        case GraqlParser.CONTAINS:
            this.enterOuterAlt(localctx, 2);
            this.state = 523;
            this.match(GraqlParser.CONTAINS);
            this.state = 524;
            this.containable();
            break;
        case GraqlParser.LIKE:
            this.enterOuterAlt(localctx, 3);
            this.state = 525;
            this.match(GraqlParser.LIKE);
            this.state = 526;
            this.regex();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_comparator;
    return this;
}

ComparatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparatorContext.prototype.constructor = ComparatorContext;

ComparatorContext.prototype.EQV = function() {
    return this.getToken(GraqlParser.EQV, 0);
};

ComparatorContext.prototype.NEQV = function() {
    return this.getToken(GraqlParser.NEQV, 0);
};

ComparatorContext.prototype.GT = function() {
    return this.getToken(GraqlParser.GT, 0);
};

ComparatorContext.prototype.GTE = function() {
    return this.getToken(GraqlParser.GTE, 0);
};

ComparatorContext.prototype.LT = function() {
    return this.getToken(GraqlParser.LT, 0);
};

ComparatorContext.prototype.LTE = function() {
    return this.getToken(GraqlParser.LTE, 0);
};

ComparatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterComparator(this);
	}
};

ComparatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitComparator(this);
	}
};

ComparatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitComparator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.ComparatorContext = ComparatorContext;

GraqlParser.prototype.comparator = function() {

    var localctx = new ComparatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, GraqlParser.RULE_comparator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 529;
        _la = this._input.LA(1);
        if(!(((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (GraqlParser.EQV - 78)) | (1 << (GraqlParser.NEQV - 78)) | (1 << (GraqlParser.GT - 78)) | (1 << (GraqlParser.GTE - 78)) | (1 << (GraqlParser.LT - 78)) | (1 << (GraqlParser.LTE - 78)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_comparable;
    return this;
}

ComparableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparableContext.prototype.constructor = ComparableContext;

ComparableContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

ComparableContext.prototype.VAR_ = function() {
    return this.getToken(GraqlParser.VAR_, 0);
};

ComparableContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterComparable(this);
	}
};

ComparableContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitComparable(this);
	}
};

ComparableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitComparable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.ComparableContext = ComparableContext;

GraqlParser.prototype.comparable = function() {

    var localctx = new ComparableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, GraqlParser.RULE_comparable);
    try {
        this.state = 533;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.BOOLEAN_:
        case GraqlParser.STRING_:
        case GraqlParser.INTEGER_:
        case GraqlParser.REAL_:
        case GraqlParser.DATE_:
        case GraqlParser.DATETIME_:
            this.enterOuterAlt(localctx, 1);
            this.state = 531;
            this.literal();
            break;
        case GraqlParser.VAR_:
            this.enterOuterAlt(localctx, 2);
            this.state = 532;
            this.match(GraqlParser.VAR_);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContainableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_containable;
    return this;
}

ContainableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContainableContext.prototype.constructor = ContainableContext;

ContainableContext.prototype.STRING_ = function() {
    return this.getToken(GraqlParser.STRING_, 0);
};

ContainableContext.prototype.VAR_ = function() {
    return this.getToken(GraqlParser.VAR_, 0);
};

ContainableContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterContainable(this);
	}
};

ContainableContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitContainable(this);
	}
};

ContainableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitContainable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.ContainableContext = ContainableContext;

GraqlParser.prototype.containable = function() {

    var localctx = new ContainableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, GraqlParser.RULE_containable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 535;
        _la = this._input.LA(1);
        if(!(_la===GraqlParser.STRING_ || _la===GraqlParser.VAR_)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compute_conditionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_compute_conditions;
    return this;
}

Compute_conditionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compute_conditionsContext.prototype.constructor = Compute_conditionsContext;

Compute_conditionsContext.prototype.conditions_count = function() {
    return this.getTypedRuleContext(Conditions_countContext,0);
};

Compute_conditionsContext.prototype.conditions_value = function() {
    return this.getTypedRuleContext(Conditions_valueContext,0);
};

Compute_conditionsContext.prototype.conditions_central = function() {
    return this.getTypedRuleContext(Conditions_centralContext,0);
};

Compute_conditionsContext.prototype.conditions_cluster = function() {
    return this.getTypedRuleContext(Conditions_clusterContext,0);
};

Compute_conditionsContext.prototype.conditions_path = function() {
    return this.getTypedRuleContext(Conditions_pathContext,0);
};

Compute_conditionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterCompute_conditions(this);
	}
};

Compute_conditionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitCompute_conditions(this);
	}
};

Compute_conditionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitCompute_conditions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Compute_conditionsContext = Compute_conditionsContext;

GraqlParser.prototype.compute_conditions = function() {

    var localctx = new Compute_conditionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, GraqlParser.RULE_compute_conditions);
    try {
        this.state = 542;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.COUNT:
            this.enterOuterAlt(localctx, 1);
            this.state = 537;
            this.conditions_count();
            break;
        case GraqlParser.MAX:
        case GraqlParser.MIN:
        case GraqlParser.MEAN:
        case GraqlParser.MEDIAN:
        case GraqlParser.STD:
        case GraqlParser.SUM:
            this.enterOuterAlt(localctx, 2);
            this.state = 538;
            this.conditions_value();
            break;
        case GraqlParser.CENTRALITY:
            this.enterOuterAlt(localctx, 3);
            this.state = 539;
            this.conditions_central();
            break;
        case GraqlParser.CLUSTER:
            this.enterOuterAlt(localctx, 4);
            this.state = 540;
            this.conditions_cluster();
            break;
        case GraqlParser.PATH:
            this.enterOuterAlt(localctx, 5);
            this.state = 541;
            this.conditions_path();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compute_methodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_compute_method;
    return this;
}

Compute_methodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compute_methodContext.prototype.constructor = Compute_methodContext;

Compute_methodContext.prototype.MIN = function() {
    return this.getToken(GraqlParser.MIN, 0);
};

Compute_methodContext.prototype.MAX = function() {
    return this.getToken(GraqlParser.MAX, 0);
};

Compute_methodContext.prototype.MEDIAN = function() {
    return this.getToken(GraqlParser.MEDIAN, 0);
};

Compute_methodContext.prototype.MEAN = function() {
    return this.getToken(GraqlParser.MEAN, 0);
};

Compute_methodContext.prototype.STD = function() {
    return this.getToken(GraqlParser.STD, 0);
};

Compute_methodContext.prototype.SUM = function() {
    return this.getToken(GraqlParser.SUM, 0);
};

Compute_methodContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterCompute_method(this);
	}
};

Compute_methodContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitCompute_method(this);
	}
};

Compute_methodContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitCompute_method(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Compute_methodContext = Compute_methodContext;

GraqlParser.prototype.compute_method = function() {

    var localctx = new Compute_methodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, GraqlParser.RULE_compute_method);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 544;
        _la = this._input.LA(1);
        if(!(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (GraqlParser.MAX - 52)) | (1 << (GraqlParser.MIN - 52)) | (1 << (GraqlParser.MEAN - 52)) | (1 << (GraqlParser.MEDIAN - 52)) | (1 << (GraqlParser.STD - 52)) | (1 << (GraqlParser.SUM - 52)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Conditions_countContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_conditions_count;
    return this;
}

Conditions_countContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditions_countContext.prototype.constructor = Conditions_countContext;

Conditions_countContext.prototype.COUNT = function() {
    return this.getToken(GraqlParser.COUNT, 0);
};

Conditions_countContext.prototype.input_count = function() {
    return this.getTypedRuleContext(Input_countContext,0);
};

Conditions_countContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterConditions_count(this);
	}
};

Conditions_countContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitConditions_count(this);
	}
};

Conditions_countContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitConditions_count(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Conditions_countContext = Conditions_countContext;

GraqlParser.prototype.conditions_count = function() {

    var localctx = new Conditions_countContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, GraqlParser.RULE_conditions_count);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 546;
        this.match(GraqlParser.COUNT);
        this.state = 548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GraqlParser.IN) {
            this.state = 547;
            this.input_count();
        }

        this.state = 550;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Conditions_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_conditions_value;
    return this;
}

Conditions_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditions_valueContext.prototype.constructor = Conditions_valueContext;

Conditions_valueContext.prototype.compute_method = function() {
    return this.getTypedRuleContext(Compute_methodContext,0);
};

Conditions_valueContext.prototype.input_value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Input_valueContext);
    } else {
        return this.getTypedRuleContext(Input_valueContext,i);
    }
};

Conditions_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterConditions_value(this);
	}
};

Conditions_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitConditions_value(this);
	}
};

Conditions_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitConditions_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Conditions_valueContext = Conditions_valueContext;

GraqlParser.prototype.conditions_value = function() {

    var localctx = new Conditions_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, GraqlParser.RULE_conditions_value);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 552;
        this.compute_method();
        this.state = 553;
        this.input_value();
        this.state = 558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GraqlParser.T__0) {
            this.state = 554;
            this.match(GraqlParser.T__0);
            this.state = 555;
            this.input_value();
            this.state = 560;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 561;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Conditions_centralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_conditions_central;
    return this;
}

Conditions_centralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditions_centralContext.prototype.constructor = Conditions_centralContext;

Conditions_centralContext.prototype.CENTRALITY = function() {
    return this.getToken(GraqlParser.CENTRALITY, 0);
};

Conditions_centralContext.prototype.input_central = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Input_centralContext);
    } else {
        return this.getTypedRuleContext(Input_centralContext,i);
    }
};

Conditions_centralContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterConditions_central(this);
	}
};

Conditions_centralContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitConditions_central(this);
	}
};

Conditions_centralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitConditions_central(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Conditions_centralContext = Conditions_centralContext;

GraqlParser.prototype.conditions_central = function() {

    var localctx = new Conditions_centralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, GraqlParser.RULE_conditions_central);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 563;
        this.match(GraqlParser.CENTRALITY);
        this.state = 564;
        this.input_central();
        this.state = 569;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GraqlParser.T__0) {
            this.state = 565;
            this.match(GraqlParser.T__0);
            this.state = 566;
            this.input_central();
            this.state = 571;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 572;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Conditions_clusterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_conditions_cluster;
    return this;
}

Conditions_clusterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditions_clusterContext.prototype.constructor = Conditions_clusterContext;

Conditions_clusterContext.prototype.CLUSTER = function() {
    return this.getToken(GraqlParser.CLUSTER, 0);
};

Conditions_clusterContext.prototype.input_cluster = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Input_clusterContext);
    } else {
        return this.getTypedRuleContext(Input_clusterContext,i);
    }
};

Conditions_clusterContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterConditions_cluster(this);
	}
};

Conditions_clusterContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitConditions_cluster(this);
	}
};

Conditions_clusterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitConditions_cluster(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Conditions_clusterContext = Conditions_clusterContext;

GraqlParser.prototype.conditions_cluster = function() {

    var localctx = new Conditions_clusterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, GraqlParser.RULE_conditions_cluster);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 574;
        this.match(GraqlParser.CLUSTER);
        this.state = 575;
        this.input_cluster();
        this.state = 580;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GraqlParser.T__0) {
            this.state = 576;
            this.match(GraqlParser.T__0);
            this.state = 577;
            this.input_cluster();
            this.state = 582;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 583;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Conditions_pathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_conditions_path;
    return this;
}

Conditions_pathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditions_pathContext.prototype.constructor = Conditions_pathContext;

Conditions_pathContext.prototype.PATH = function() {
    return this.getToken(GraqlParser.PATH, 0);
};

Conditions_pathContext.prototype.input_path = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Input_pathContext);
    } else {
        return this.getTypedRuleContext(Input_pathContext,i);
    }
};

Conditions_pathContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterConditions_path(this);
	}
};

Conditions_pathContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitConditions_path(this);
	}
};

Conditions_pathContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitConditions_path(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Conditions_pathContext = Conditions_pathContext;

GraqlParser.prototype.conditions_path = function() {

    var localctx = new Conditions_pathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, GraqlParser.RULE_conditions_path);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 585;
        this.match(GraqlParser.PATH);
        this.state = 586;
        this.input_path();
        this.state = 591;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GraqlParser.T__0) {
            this.state = 587;
            this.match(GraqlParser.T__0);
            this.state = 588;
            this.input_path();
            this.state = 593;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 594;
        this.match(GraqlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Input_countContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_input_count;
    return this;
}

Input_countContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_countContext.prototype.constructor = Input_countContext;

Input_countContext.prototype.compute_scope = function() {
    return this.getTypedRuleContext(Compute_scopeContext,0);
};

Input_countContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterInput_count(this);
	}
};

Input_countContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitInput_count(this);
	}
};

Input_countContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitInput_count(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Input_countContext = Input_countContext;

GraqlParser.prototype.input_count = function() {

    var localctx = new Input_countContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, GraqlParser.RULE_input_count);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        this.compute_scope();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Input_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_input_value;
    return this;
}

Input_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_valueContext.prototype.constructor = Input_valueContext;

Input_valueContext.prototype.compute_scope = function() {
    return this.getTypedRuleContext(Compute_scopeContext,0);
};

Input_valueContext.prototype.compute_target = function() {
    return this.getTypedRuleContext(Compute_targetContext,0);
};

Input_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterInput_value(this);
	}
};

Input_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitInput_value(this);
	}
};

Input_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitInput_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Input_valueContext = Input_valueContext;

GraqlParser.prototype.input_value = function() {

    var localctx = new Input_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, GraqlParser.RULE_input_value);
    try {
        this.state = 600;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.IN:
            this.enterOuterAlt(localctx, 1);
            this.state = 598;
            this.compute_scope();
            break;
        case GraqlParser.OF:
            this.enterOuterAlt(localctx, 2);
            this.state = 599;
            this.compute_target();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Input_centralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_input_central;
    return this;
}

Input_centralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_centralContext.prototype.constructor = Input_centralContext;

Input_centralContext.prototype.compute_scope = function() {
    return this.getTypedRuleContext(Compute_scopeContext,0);
};

Input_centralContext.prototype.compute_target = function() {
    return this.getTypedRuleContext(Compute_targetContext,0);
};

Input_centralContext.prototype.compute_config = function() {
    return this.getTypedRuleContext(Compute_configContext,0);
};

Input_centralContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterInput_central(this);
	}
};

Input_centralContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitInput_central(this);
	}
};

Input_centralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitInput_central(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Input_centralContext = Input_centralContext;

GraqlParser.prototype.input_central = function() {

    var localctx = new Input_centralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, GraqlParser.RULE_input_central);
    try {
        this.state = 605;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.IN:
            this.enterOuterAlt(localctx, 1);
            this.state = 602;
            this.compute_scope();
            break;
        case GraqlParser.OF:
            this.enterOuterAlt(localctx, 2);
            this.state = 603;
            this.compute_target();
            break;
        case GraqlParser.USING:
        case GraqlParser.WHERE:
            this.enterOuterAlt(localctx, 3);
            this.state = 604;
            this.compute_config();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Input_clusterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_input_cluster;
    return this;
}

Input_clusterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_clusterContext.prototype.constructor = Input_clusterContext;

Input_clusterContext.prototype.compute_scope = function() {
    return this.getTypedRuleContext(Compute_scopeContext,0);
};

Input_clusterContext.prototype.compute_config = function() {
    return this.getTypedRuleContext(Compute_configContext,0);
};

Input_clusterContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterInput_cluster(this);
	}
};

Input_clusterContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitInput_cluster(this);
	}
};

Input_clusterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitInput_cluster(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Input_clusterContext = Input_clusterContext;

GraqlParser.prototype.input_cluster = function() {

    var localctx = new Input_clusterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, GraqlParser.RULE_input_cluster);
    try {
        this.state = 609;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.IN:
            this.enterOuterAlt(localctx, 1);
            this.state = 607;
            this.compute_scope();
            break;
        case GraqlParser.USING:
        case GraqlParser.WHERE:
            this.enterOuterAlt(localctx, 2);
            this.state = 608;
            this.compute_config();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Input_pathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_input_path;
    return this;
}

Input_pathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_pathContext.prototype.constructor = Input_pathContext;

Input_pathContext.prototype.compute_scope = function() {
    return this.getTypedRuleContext(Compute_scopeContext,0);
};

Input_pathContext.prototype.compute_direction = function() {
    return this.getTypedRuleContext(Compute_directionContext,0);
};

Input_pathContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterInput_path(this);
	}
};

Input_pathContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitInput_path(this);
	}
};

Input_pathContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitInput_path(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Input_pathContext = Input_pathContext;

GraqlParser.prototype.input_path = function() {

    var localctx = new Input_pathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, GraqlParser.RULE_input_path);
    try {
        this.state = 613;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.IN:
            this.enterOuterAlt(localctx, 1);
            this.state = 611;
            this.compute_scope();
            break;
        case GraqlParser.FROM:
        case GraqlParser.TO:
            this.enterOuterAlt(localctx, 2);
            this.state = 612;
            this.compute_direction();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compute_directionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_compute_direction;
    return this;
}

Compute_directionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compute_directionContext.prototype.constructor = Compute_directionContext;

Compute_directionContext.prototype.FROM = function() {
    return this.getToken(GraqlParser.FROM, 0);
};

Compute_directionContext.prototype.ID_ = function() {
    return this.getToken(GraqlParser.ID_, 0);
};

Compute_directionContext.prototype.TO = function() {
    return this.getToken(GraqlParser.TO, 0);
};

Compute_directionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterCompute_direction(this);
	}
};

Compute_directionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitCompute_direction(this);
	}
};

Compute_directionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitCompute_direction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Compute_directionContext = Compute_directionContext;

GraqlParser.prototype.compute_direction = function() {

    var localctx = new Compute_directionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, GraqlParser.RULE_compute_direction);
    try {
        this.state = 619;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.FROM:
            this.enterOuterAlt(localctx, 1);
            this.state = 615;
            this.match(GraqlParser.FROM);
            this.state = 616;
            this.match(GraqlParser.ID_);
            break;
        case GraqlParser.TO:
            this.enterOuterAlt(localctx, 2);
            this.state = 617;
            this.match(GraqlParser.TO);
            this.state = 618;
            this.match(GraqlParser.ID_);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compute_targetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_compute_target;
    return this;
}

Compute_targetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compute_targetContext.prototype.constructor = Compute_targetContext;

Compute_targetContext.prototype.OF = function() {
    return this.getToken(GraqlParser.OF, 0);
};

Compute_targetContext.prototype.type_labels = function() {
    return this.getTypedRuleContext(Type_labelsContext,0);
};

Compute_targetContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterCompute_target(this);
	}
};

Compute_targetContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitCompute_target(this);
	}
};

Compute_targetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitCompute_target(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Compute_targetContext = Compute_targetContext;

GraqlParser.prototype.compute_target = function() {

    var localctx = new Compute_targetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, GraqlParser.RULE_compute_target);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621;
        this.match(GraqlParser.OF);
        this.state = 622;
        this.type_labels();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compute_scopeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_compute_scope;
    return this;
}

Compute_scopeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compute_scopeContext.prototype.constructor = Compute_scopeContext;

Compute_scopeContext.prototype.IN = function() {
    return this.getToken(GraqlParser.IN, 0);
};

Compute_scopeContext.prototype.type_labels = function() {
    return this.getTypedRuleContext(Type_labelsContext,0);
};

Compute_scopeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterCompute_scope(this);
	}
};

Compute_scopeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitCompute_scope(this);
	}
};

Compute_scopeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitCompute_scope(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Compute_scopeContext = Compute_scopeContext;

GraqlParser.prototype.compute_scope = function() {

    var localctx = new Compute_scopeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, GraqlParser.RULE_compute_scope);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 624;
        this.match(GraqlParser.IN);
        this.state = 625;
        this.type_labels();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compute_configContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_compute_config;
    return this;
}

Compute_configContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compute_configContext.prototype.constructor = Compute_configContext;

Compute_configContext.prototype.USING = function() {
    return this.getToken(GraqlParser.USING, 0);
};

Compute_configContext.prototype.compute_algorithm = function() {
    return this.getTypedRuleContext(Compute_algorithmContext,0);
};

Compute_configContext.prototype.WHERE = function() {
    return this.getToken(GraqlParser.WHERE, 0);
};

Compute_configContext.prototype.compute_args = function() {
    return this.getTypedRuleContext(Compute_argsContext,0);
};

Compute_configContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterCompute_config(this);
	}
};

Compute_configContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitCompute_config(this);
	}
};

Compute_configContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitCompute_config(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Compute_configContext = Compute_configContext;

GraqlParser.prototype.compute_config = function() {

    var localctx = new Compute_configContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, GraqlParser.RULE_compute_config);
    try {
        this.state = 631;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.USING:
            this.enterOuterAlt(localctx, 1);
            this.state = 627;
            this.match(GraqlParser.USING);
            this.state = 628;
            this.compute_algorithm();
            break;
        case GraqlParser.WHERE:
            this.enterOuterAlt(localctx, 2);
            this.state = 629;
            this.match(GraqlParser.WHERE);
            this.state = 630;
            this.compute_args();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compute_algorithmContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_compute_algorithm;
    return this;
}

Compute_algorithmContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compute_algorithmContext.prototype.constructor = Compute_algorithmContext;

Compute_algorithmContext.prototype.DEGREE = function() {
    return this.getToken(GraqlParser.DEGREE, 0);
};

Compute_algorithmContext.prototype.K_CORE = function() {
    return this.getToken(GraqlParser.K_CORE, 0);
};

Compute_algorithmContext.prototype.CONNECTED_COMPONENT = function() {
    return this.getToken(GraqlParser.CONNECTED_COMPONENT, 0);
};

Compute_algorithmContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterCompute_algorithm(this);
	}
};

Compute_algorithmContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitCompute_algorithm(this);
	}
};

Compute_algorithmContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitCompute_algorithm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Compute_algorithmContext = Compute_algorithmContext;

GraqlParser.prototype.compute_algorithm = function() {

    var localctx = new Compute_algorithmContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, GraqlParser.RULE_compute_algorithm);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        _la = this._input.LA(1);
        if(!(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (GraqlParser.DEGREE - 61)) | (1 << (GraqlParser.K_CORE - 61)) | (1 << (GraqlParser.CONNECTED_COMPONENT - 61)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compute_argsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_compute_args;
    return this;
}

Compute_argsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compute_argsContext.prototype.constructor = Compute_argsContext;

Compute_argsContext.prototype.compute_arg = function() {
    return this.getTypedRuleContext(Compute_argContext,0);
};

Compute_argsContext.prototype.compute_args_array = function() {
    return this.getTypedRuleContext(Compute_args_arrayContext,0);
};

Compute_argsContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterCompute_args(this);
	}
};

Compute_argsContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitCompute_args(this);
	}
};

Compute_argsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitCompute_args(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Compute_argsContext = Compute_argsContext;

GraqlParser.prototype.compute_args = function() {

    var localctx = new Compute_argsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, GraqlParser.RULE_compute_args);
    try {
        this.state = 637;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.MIN_K:
        case GraqlParser.K:
        case GraqlParser.SIZE:
        case GraqlParser.CONTAINS:
            this.enterOuterAlt(localctx, 1);
            this.state = 635;
            this.compute_arg();
            break;
        case GraqlParser.T__7:
            this.enterOuterAlt(localctx, 2);
            this.state = 636;
            this.compute_args_array();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compute_args_arrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_compute_args_array;
    return this;
}

Compute_args_arrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compute_args_arrayContext.prototype.constructor = Compute_args_arrayContext;

Compute_args_arrayContext.prototype.compute_arg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compute_argContext);
    } else {
        return this.getTypedRuleContext(Compute_argContext,i);
    }
};

Compute_args_arrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterCompute_args_array(this);
	}
};

Compute_args_arrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitCompute_args_array(this);
	}
};

Compute_args_arrayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitCompute_args_array(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Compute_args_arrayContext = Compute_args_arrayContext;

GraqlParser.prototype.compute_args_array = function() {

    var localctx = new Compute_args_arrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, GraqlParser.RULE_compute_args_array);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this.match(GraqlParser.T__7);
        this.state = 640;
        this.compute_arg();
        this.state = 645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GraqlParser.T__0) {
            this.state = 641;
            this.match(GraqlParser.T__0);
            this.state = 642;
            this.compute_arg();
            this.state = 647;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 648;
        this.match(GraqlParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compute_argContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_compute_arg;
    return this;
}

Compute_argContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compute_argContext.prototype.constructor = Compute_argContext;

Compute_argContext.prototype.MIN_K = function() {
    return this.getToken(GraqlParser.MIN_K, 0);
};

Compute_argContext.prototype.INTEGER_ = function() {
    return this.getToken(GraqlParser.INTEGER_, 0);
};

Compute_argContext.prototype.K = function() {
    return this.getToken(GraqlParser.K, 0);
};

Compute_argContext.prototype.SIZE = function() {
    return this.getToken(GraqlParser.SIZE, 0);
};

Compute_argContext.prototype.CONTAINS = function() {
    return this.getToken(GraqlParser.CONTAINS, 0);
};

Compute_argContext.prototype.ID_ = function() {
    return this.getToken(GraqlParser.ID_, 0);
};

Compute_argContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterCompute_arg(this);
	}
};

Compute_argContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitCompute_arg(this);
	}
};

Compute_argContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitCompute_arg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Compute_argContext = Compute_argContext;

GraqlParser.prototype.compute_arg = function() {

    var localctx = new Compute_argContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, GraqlParser.RULE_compute_arg);
    try {
        this.state = 662;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.MIN_K:
            this.enterOuterAlt(localctx, 1);
            this.state = 650;
            this.match(GraqlParser.MIN_K);
            this.state = 651;
            this.match(GraqlParser.T__9);
            this.state = 652;
            this.match(GraqlParser.INTEGER_);
            break;
        case GraqlParser.K:
            this.enterOuterAlt(localctx, 2);
            this.state = 653;
            this.match(GraqlParser.K);
            this.state = 654;
            this.match(GraqlParser.T__9);
            this.state = 655;
            this.match(GraqlParser.INTEGER_);
            break;
        case GraqlParser.SIZE:
            this.enterOuterAlt(localctx, 3);
            this.state = 656;
            this.match(GraqlParser.SIZE);
            this.state = 657;
            this.match(GraqlParser.T__9);
            this.state = 658;
            this.match(GraqlParser.INTEGER_);
            break;
        case GraqlParser.CONTAINS:
            this.enterOuterAlt(localctx, 4);
            this.state = 659;
            this.match(GraqlParser.CONTAINS);
            this.state = 660;
            this.match(GraqlParser.T__9);
            this.state = 661;
            this.match(GraqlParser.ID_);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.type_label = function() {
    return this.getTypedRuleContext(Type_labelContext,0);
};

TypeContext.prototype.VAR_ = function() {
    return this.getToken(GraqlParser.VAR_, 0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitType(this);
	}
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.TypeContext = TypeContext;

GraqlParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, GraqlParser.RULE_type);
    try {
        this.state = 666;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.THING:
        case GraqlParser.ENTITY:
        case GraqlParser.ATTRIBUTE:
        case GraqlParser.RELATION:
        case GraqlParser.ROLE:
        case GraqlParser.RULE:
        case GraqlParser.COUNT:
        case GraqlParser.MAX:
        case GraqlParser.MIN:
        case GraqlParser.MEAN:
        case GraqlParser.MEDIAN:
        case GraqlParser.STD:
        case GraqlParser.SUM:
        case GraqlParser.CLUSTER:
        case GraqlParser.PATH:
        case GraqlParser.DEGREE:
        case GraqlParser.K_CORE:
        case GraqlParser.CONNECTED_COMPONENT:
        case GraqlParser.FROM:
        case GraqlParser.TO:
        case GraqlParser.OF:
        case GraqlParser.IN:
        case GraqlParser.WHERE:
        case GraqlParser.MIN_K:
        case GraqlParser.K:
        case GraqlParser.SIZE:
        case GraqlParser.CONTAINS:
        case GraqlParser.ID_:
        case GraqlParser.TYPE_IMPLICIT_:
        case GraqlParser.TYPE_NAME_:
            this.enterOuterAlt(localctx, 1);
            this.state = 664;
            this.type_label();
            break;
        case GraqlParser.VAR_:
            this.enterOuterAlt(localctx, 2);
            this.state = 665;
            this.match(GraqlParser.VAR_);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_labelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_type_label;
    return this;
}

Type_labelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_labelContext.prototype.constructor = Type_labelContext;

Type_labelContext.prototype.type_native = function() {
    return this.getTypedRuleContext(Type_nativeContext,0);
};

Type_labelContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Type_labelContext.prototype.unreserved = function() {
    return this.getTypedRuleContext(UnreservedContext,0);
};

Type_labelContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterType_label(this);
	}
};

Type_labelContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitType_label(this);
	}
};

Type_labelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitType_label(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Type_labelContext = Type_labelContext;

GraqlParser.prototype.type_label = function() {

    var localctx = new Type_labelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, GraqlParser.RULE_type_label);
    try {
        this.state = 671;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.THING:
        case GraqlParser.ENTITY:
        case GraqlParser.ATTRIBUTE:
        case GraqlParser.RELATION:
        case GraqlParser.ROLE:
        case GraqlParser.RULE:
            this.enterOuterAlt(localctx, 1);
            this.state = 668;
            this.type_native();
            break;
        case GraqlParser.ID_:
        case GraqlParser.TYPE_IMPLICIT_:
        case GraqlParser.TYPE_NAME_:
            this.enterOuterAlt(localctx, 2);
            this.state = 669;
            this.type_name();
            break;
        case GraqlParser.COUNT:
        case GraqlParser.MAX:
        case GraqlParser.MIN:
        case GraqlParser.MEAN:
        case GraqlParser.MEDIAN:
        case GraqlParser.STD:
        case GraqlParser.SUM:
        case GraqlParser.CLUSTER:
        case GraqlParser.PATH:
        case GraqlParser.DEGREE:
        case GraqlParser.K_CORE:
        case GraqlParser.CONNECTED_COMPONENT:
        case GraqlParser.FROM:
        case GraqlParser.TO:
        case GraqlParser.OF:
        case GraqlParser.IN:
        case GraqlParser.WHERE:
        case GraqlParser.MIN_K:
        case GraqlParser.K:
        case GraqlParser.SIZE:
        case GraqlParser.CONTAINS:
            this.enterOuterAlt(localctx, 3);
            this.state = 670;
            this.unreserved();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_labelsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_type_labels;
    return this;
}

Type_labelsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_labelsContext.prototype.constructor = Type_labelsContext;

Type_labelsContext.prototype.type_label = function() {
    return this.getTypedRuleContext(Type_labelContext,0);
};

Type_labelsContext.prototype.type_label_array = function() {
    return this.getTypedRuleContext(Type_label_arrayContext,0);
};

Type_labelsContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterType_labels(this);
	}
};

Type_labelsContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitType_labels(this);
	}
};

Type_labelsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitType_labels(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Type_labelsContext = Type_labelsContext;

GraqlParser.prototype.type_labels = function() {

    var localctx = new Type_labelsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, GraqlParser.RULE_type_labels);
    try {
        this.state = 675;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GraqlParser.THING:
        case GraqlParser.ENTITY:
        case GraqlParser.ATTRIBUTE:
        case GraqlParser.RELATION:
        case GraqlParser.ROLE:
        case GraqlParser.RULE:
        case GraqlParser.COUNT:
        case GraqlParser.MAX:
        case GraqlParser.MIN:
        case GraqlParser.MEAN:
        case GraqlParser.MEDIAN:
        case GraqlParser.STD:
        case GraqlParser.SUM:
        case GraqlParser.CLUSTER:
        case GraqlParser.PATH:
        case GraqlParser.DEGREE:
        case GraqlParser.K_CORE:
        case GraqlParser.CONNECTED_COMPONENT:
        case GraqlParser.FROM:
        case GraqlParser.TO:
        case GraqlParser.OF:
        case GraqlParser.IN:
        case GraqlParser.WHERE:
        case GraqlParser.MIN_K:
        case GraqlParser.K:
        case GraqlParser.SIZE:
        case GraqlParser.CONTAINS:
        case GraqlParser.ID_:
        case GraqlParser.TYPE_IMPLICIT_:
        case GraqlParser.TYPE_NAME_:
            this.enterOuterAlt(localctx, 1);
            this.state = 673;
            this.type_label();
            break;
        case GraqlParser.T__7:
            this.enterOuterAlt(localctx, 2);
            this.state = 674;
            this.type_label_array();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_label_arrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_type_label_array;
    return this;
}

Type_label_arrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_label_arrayContext.prototype.constructor = Type_label_arrayContext;

Type_label_arrayContext.prototype.type_label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_labelContext);
    } else {
        return this.getTypedRuleContext(Type_labelContext,i);
    }
};

Type_label_arrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterType_label_array(this);
	}
};

Type_label_arrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitType_label_array(this);
	}
};

Type_label_arrayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitType_label_array(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Type_label_arrayContext = Type_label_arrayContext;

GraqlParser.prototype.type_label_array = function() {

    var localctx = new Type_label_arrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, GraqlParser.RULE_type_label_array);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 677;
        this.match(GraqlParser.T__7);
        this.state = 678;
        this.type_label();
        this.state = 683;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GraqlParser.T__0) {
            this.state = 679;
            this.match(GraqlParser.T__0);
            this.state = 680;
            this.type_label();
            this.state = 685;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 686;
        this.match(GraqlParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_nativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_type_native;
    return this;
}

Type_nativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_nativeContext.prototype.constructor = Type_nativeContext;

Type_nativeContext.prototype.THING = function() {
    return this.getToken(GraqlParser.THING, 0);
};

Type_nativeContext.prototype.ENTITY = function() {
    return this.getToken(GraqlParser.ENTITY, 0);
};

Type_nativeContext.prototype.ATTRIBUTE = function() {
    return this.getToken(GraqlParser.ATTRIBUTE, 0);
};

Type_nativeContext.prototype.RELATION = function() {
    return this.getToken(GraqlParser.RELATION, 0);
};

Type_nativeContext.prototype.ROLE = function() {
    return this.getToken(GraqlParser.ROLE, 0);
};

Type_nativeContext.prototype.RULE = function() {
    return this.getToken(GraqlParser.RULE, 0);
};

Type_nativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterType_native(this);
	}
};

Type_nativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitType_native(this);
	}
};

Type_nativeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitType_native(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Type_nativeContext = Type_nativeContext;

GraqlParser.prototype.type_native = function() {

    var localctx = new Type_nativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, GraqlParser.RULE_type_native);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 688;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GraqlParser.THING) | (1 << GraqlParser.ENTITY) | (1 << GraqlParser.ATTRIBUTE) | (1 << GraqlParser.RELATION) | (1 << GraqlParser.ROLE) | (1 << GraqlParser.RULE))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_type_name;
    return this;
}

Type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_nameContext.prototype.constructor = Type_nameContext;

Type_nameContext.prototype.TYPE_NAME_ = function() {
    return this.getToken(GraqlParser.TYPE_NAME_, 0);
};

Type_nameContext.prototype.TYPE_IMPLICIT_ = function() {
    return this.getToken(GraqlParser.TYPE_IMPLICIT_, 0);
};

Type_nameContext.prototype.ID_ = function() {
    return this.getToken(GraqlParser.ID_, 0);
};

Type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterType_name(this);
	}
};

Type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitType_name(this);
	}
};

Type_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitType_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.Type_nameContext = Type_nameContext;

GraqlParser.prototype.type_name = function() {

    var localctx = new Type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, GraqlParser.RULE_type_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 690;
        _la = this._input.LA(1);
        if(!(((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (GraqlParser.ID_ - 100)) | (1 << (GraqlParser.TYPE_IMPLICIT_ - 100)) | (1 << (GraqlParser.TYPE_NAME_ - 100)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DatatypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_datatype;
    return this;
}

DatatypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatatypeContext.prototype.constructor = DatatypeContext;

DatatypeContext.prototype.LONG = function() {
    return this.getToken(GraqlParser.LONG, 0);
};

DatatypeContext.prototype.DOUBLE = function() {
    return this.getToken(GraqlParser.DOUBLE, 0);
};

DatatypeContext.prototype.STRING = function() {
    return this.getToken(GraqlParser.STRING, 0);
};

DatatypeContext.prototype.BOOLEAN = function() {
    return this.getToken(GraqlParser.BOOLEAN, 0);
};

DatatypeContext.prototype.DATE = function() {
    return this.getToken(GraqlParser.DATE, 0);
};

DatatypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterDatatype(this);
	}
};

DatatypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitDatatype(this);
	}
};

DatatypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitDatatype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.DatatypeContext = DatatypeContext;

GraqlParser.prototype.datatype = function() {

    var localctx = new DatatypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, GraqlParser.RULE_datatype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 692;
        _la = this._input.LA(1);
        if(!(((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (GraqlParser.LONG - 84)) | (1 << (GraqlParser.DOUBLE - 84)) | (1 << (GraqlParser.STRING - 84)) | (1 << (GraqlParser.BOOLEAN - 84)) | (1 << (GraqlParser.DATE - 84)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.STRING_ = function() {
    return this.getToken(GraqlParser.STRING_, 0);
};

LiteralContext.prototype.INTEGER_ = function() {
    return this.getToken(GraqlParser.INTEGER_, 0);
};

LiteralContext.prototype.REAL_ = function() {
    return this.getToken(GraqlParser.REAL_, 0);
};

LiteralContext.prototype.BOOLEAN_ = function() {
    return this.getToken(GraqlParser.BOOLEAN_, 0);
};

LiteralContext.prototype.DATE_ = function() {
    return this.getToken(GraqlParser.DATE_, 0);
};

LiteralContext.prototype.DATETIME_ = function() {
    return this.getToken(GraqlParser.DATETIME_, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.LiteralContext = LiteralContext;

GraqlParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, GraqlParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 694;
        _la = this._input.LA(1);
        if(!(((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (GraqlParser.BOOLEAN_ - 89)) | (1 << (GraqlParser.STRING_ - 89)) | (1 << (GraqlParser.INTEGER_ - 89)) | (1 << (GraqlParser.REAL_ - 89)) | (1 << (GraqlParser.DATE_ - 89)) | (1 << (GraqlParser.DATETIME_ - 89)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RegexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_regex;
    return this;
}

RegexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RegexContext.prototype.constructor = RegexContext;

RegexContext.prototype.STRING_ = function() {
    return this.getToken(GraqlParser.STRING_, 0);
};

RegexContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterRegex(this);
	}
};

RegexContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitRegex(this);
	}
};

RegexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitRegex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.RegexContext = RegexContext;

GraqlParser.prototype.regex = function() {

    var localctx = new RegexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, GraqlParser.RULE_regex);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 696;
        this.match(GraqlParser.STRING_);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnreservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GraqlParser.RULE_unreserved;
    return this;
}

UnreservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnreservedContext.prototype.constructor = UnreservedContext;

UnreservedContext.prototype.MIN = function() {
    return this.getToken(GraqlParser.MIN, 0);
};

UnreservedContext.prototype.MAX = function() {
    return this.getToken(GraqlParser.MAX, 0);
};

UnreservedContext.prototype.MEDIAN = function() {
    return this.getToken(GraqlParser.MEDIAN, 0);
};

UnreservedContext.prototype.MEAN = function() {
    return this.getToken(GraqlParser.MEAN, 0);
};

UnreservedContext.prototype.STD = function() {
    return this.getToken(GraqlParser.STD, 0);
};

UnreservedContext.prototype.SUM = function() {
    return this.getToken(GraqlParser.SUM, 0);
};

UnreservedContext.prototype.COUNT = function() {
    return this.getToken(GraqlParser.COUNT, 0);
};

UnreservedContext.prototype.PATH = function() {
    return this.getToken(GraqlParser.PATH, 0);
};

UnreservedContext.prototype.CLUSTER = function() {
    return this.getToken(GraqlParser.CLUSTER, 0);
};

UnreservedContext.prototype.FROM = function() {
    return this.getToken(GraqlParser.FROM, 0);
};

UnreservedContext.prototype.TO = function() {
    return this.getToken(GraqlParser.TO, 0);
};

UnreservedContext.prototype.OF = function() {
    return this.getToken(GraqlParser.OF, 0);
};

UnreservedContext.prototype.IN = function() {
    return this.getToken(GraqlParser.IN, 0);
};

UnreservedContext.prototype.DEGREE = function() {
    return this.getToken(GraqlParser.DEGREE, 0);
};

UnreservedContext.prototype.K_CORE = function() {
    return this.getToken(GraqlParser.K_CORE, 0);
};

UnreservedContext.prototype.CONNECTED_COMPONENT = function() {
    return this.getToken(GraqlParser.CONNECTED_COMPONENT, 0);
};

UnreservedContext.prototype.MIN_K = function() {
    return this.getToken(GraqlParser.MIN_K, 0);
};

UnreservedContext.prototype.K = function() {
    return this.getToken(GraqlParser.K, 0);
};

UnreservedContext.prototype.CONTAINS = function() {
    return this.getToken(GraqlParser.CONTAINS, 0);
};

UnreservedContext.prototype.SIZE = function() {
    return this.getToken(GraqlParser.SIZE, 0);
};

UnreservedContext.prototype.WHERE = function() {
    return this.getToken(GraqlParser.WHERE, 0);
};

UnreservedContext.prototype.enterRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.enterUnreserved(this);
	}
};

UnreservedContext.prototype.exitRule = function(listener) {
    if(listener instanceof GraqlListener ) {
        listener.exitUnreserved(this);
	}
};

UnreservedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GraqlVisitor ) {
        return visitor.visitUnreserved(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GraqlParser.UnreservedContext = UnreservedContext;

GraqlParser.prototype.unreserved = function() {

    var localctx = new UnreservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, GraqlParser.RULE_unreserved);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 698;
        _la = this._input.LA(1);
        if(!(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GraqlParser.COUNT - 51)) | (1 << (GraqlParser.MAX - 51)) | (1 << (GraqlParser.MIN - 51)) | (1 << (GraqlParser.MEAN - 51)) | (1 << (GraqlParser.MEDIAN - 51)) | (1 << (GraqlParser.STD - 51)) | (1 << (GraqlParser.SUM - 51)) | (1 << (GraqlParser.CLUSTER - 51)) | (1 << (GraqlParser.PATH - 51)) | (1 << (GraqlParser.DEGREE - 51)) | (1 << (GraqlParser.K_CORE - 51)) | (1 << (GraqlParser.CONNECTED_COMPONENT - 51)) | (1 << (GraqlParser.FROM - 51)) | (1 << (GraqlParser.TO - 51)) | (1 << (GraqlParser.OF - 51)) | (1 << (GraqlParser.IN - 51)) | (1 << (GraqlParser.WHERE - 51)) | (1 << (GraqlParser.MIN_K - 51)) | (1 << (GraqlParser.K - 51)) | (1 << (GraqlParser.SIZE - 51)) | (1 << (GraqlParser.CONTAINS - 51)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.GraqlParser = GraqlParser;
